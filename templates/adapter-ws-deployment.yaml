{{ if .Values.ws_adapter.deploy }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Values.docker.image_prefix}}adapter-ws 
  namespace: {{.Values.namespace.name}}
  labels:
    service: {{.Values.docker.image_prefix}}adapter-ws 
spec:
  replicas: 1
  selector:
    matchLabels:
      service: {{.Values.docker.image_prefix}}adapter-ws 
  template:
    metadata:
      labels:
        service: {{.Values.docker.image_prefix}}adapter-ws 
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: {{.Values.docker.image_prefix}}adapter-ws 
{{ if .Values.docker.registry }}
          image: {{.Values.docker.registry}}/{{.Values.docker.namespace}}/{{.Values.docker.image_prefix}}ws:latest
{{ else }}
          image: {{.Values.docker.namespace}}/{{.Values.docker.image_prefix}}ws:latest
{{ end }}
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: {{.Values.ws_adapter.port }}
          env:
          - name: PD_JAEGER_URL
            value: {{.Values.jaeger.url }}
          - name: PD_NATS_URL
            value: {{.Values.nats.url }}
          - name: PD_WS_ADAPTER_LOG_LEVEL
            value: {{.Values.ws_adapter.log_level }}
          - name: PD_WS_ADAPTER_PORT
            value: "8186"
          - name: PD_THINGS_URL
            value: {{.Values.things.url }}
      restartPolicy: Always
---

apiVersion: v1
kind: Service
metadata:
  name: {{.Values.docker.image_prefix}}adapter-ws
  namespace: {{.Values.namespace.name}}
spec:
  ports:
  - port: {{ .Values.ws_adapter.port }}
    protocol: TCP
    targetPort: {{ .Values.ws_adapter.targetport }}
  selector:
    service: {{.Values.docker.image_prefix}}adapter-ws
{{ end }}
