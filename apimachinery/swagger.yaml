swagger: "2.0"
info:
  description: This is a pandas api server.
  version: 1.0.0
  title: Swagger pandas
  contact:
    email: jenson.zuo@qq.com
  license:
    name: Apache License
host: localhost:8080
basePath: /v1
consumes:
  - application/json
produces:
  - application/json
security:
  - roleAuth:
      - user

securityDefinitions:
  roleAuth:
    type: oauth2
    flow: password
    tokenUrl: "localhost:8080/v1/users/login"
    scopes:
      user: scope of registered user
      admin: scope of registere admin

tags:
  - name: User
    description: Operations about user
  - name: Dashboard
    description: operation about dashboard
  - name: Project
    description: Operations about projects
  - name: Device
    description: Operation about devices
  - name: Model
    description: Operation about model
  - name: Logs
    description: Operation about log
  - name: Rulechain
    description: operation about rule chain
schemes:
  - http

paths:
  /users/login:
    post:
      tags:
        - User
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      security: []
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: grant_type
          in: formData
          description: ''
          required: true
          type: string
        - name: username
          in: formData
          description: The user name for login
          required: true
          type: string
        - name: password
          in: formData
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/LoginToken'
        '400':
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - User
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      security:
        - roleAuth:
          - admin
          - user
      parameters: []
      responses:
        default:
          description: successful operation
  /users/password:
    patch:
      tags:
        - User
      summary: change current user's password
      description: This can only be done by the logged in user.
      operationId: ChangeCurrentUserPassword
      parameters:
        - in: body
          name: user
          description: Updated user password
          required: true
          schema:
            type: object
            properties:
              old_password:
                type: string
              new_passowrd:
                type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /users/{userId}:
    get:
      tags:
        - User
      summary: Get user by user id
      description: This can only be done by the logged in user.
      operationId: getUser
      security:
        - roleAuth:
            - admin
            - user
      parameters:
        - name: userId
          in: path
          description: The name that needs to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - User
      summary: Updated user by id
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: user
          description: Updated user object
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
              email:
                type: string
              phone:
                type: string
              roles:
                type: array
                items:
                  type: string
                  enum:
                    - admin
                    - user
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    patch:
      tags:
        - User
      security:
        - roleAuth:
            - admin
      summary: change user's password
      description: This can only be done by the logged in user.
      operationId: ChangeUserPassword
      parameters:
        - name: userId
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: user
          description: Updated user password
          required: true
          schema:
            type: object
            properties:
              password:
                type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    delete:
      tags:
        - User
      summary: Delete user by id
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The user that needs to be deleted
          required: true
          type: string
      security:
        - roleAuth:
            - admin
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

  /dashboard:
    get:
      tags:
        - Dashboard
      description: dashboard information
      operationId: getDashboard
      produces:
        - application/json
      security:
        - roleAuth:
            - user
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "./models.json#/definitions/Dashboard"
        "400":
          description: Bad request
        "500":
          description: Server internal error
  /projects:
    post:
      tags:
        - Project
      description: create new project
      operationId: createProject
      produces:
        - application/json
      parameters:
        - in: body
          name: project
          description: new created project
          required: true
          schema:
            $ref: "./models.json#/definitions/Project"
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: "./models.json#/definitions/Project"
        "400":
          description: Bad request
        "500":
          description: Server internal error
    get:
      tags:
        - Project
      summary: retrieve all projects
      description: ""
      operationId: getProjects
      security:
        - roleAuth:
            - user
      parameters:
        - name: pageSize
          in: query
          description: Number of persons returned
          type: integer
        - name: pageNumber
          in: query
          description: Page number
          type: integer
        - name: q
          in: query
          description: >
            query object for.You can get query key from rulechain object. This is a json string.
            For example:
              * 模糊检索name,description,category
              {"name": "product"}
              {"description": "abcd"}
              {"category": "abcd"}
              * 多条件模糊检索(and)
              {"name": "product", "description": "abcd"}
              * (deprecated) 模糊检索created_at,updated_at
              {"created_at": "2018-10-11T09:13:26Z"}
              {"updated_at": "2018-10-11T09:13:26Z"}
              * 精确检索user_id,id,template_id,key,secret,status,data_format
              {"user_id": "bevh8dkvr53g2n6u9l70"}
              {"id": "bevh8dkvr53g2n6u9l70"}
              {"template_id": "bevh8dkvr53g2n6u9l70"}
              {"key": "bevh8dkvr53g2n6u9l70"}
              {"secret": "bevh8dkvr53g2n6u9l70"}
              {"data_format": "JSON"}
              {"data_format": "XML"}
          type: string
      responses:
        "200":
          description: successfully operation
          schema:
            type: array
            items:
              $ref: "./models.json#/definitions/Project"
        "400":
          description: Bad request
        "500":
          description: Internal error

  /projects/{projectId}:
    get:
      tags:
        - Project
      summary: get specified project
      description: ""
      security:
        - roleAuth:
            - user
      parameters:
        - name: projectId
          in: path
          description: project id
          required: true
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "./models.json#/definitions/Project"
        "404":
          description: Bad request

    delete:
      tags:
        - Project
      summary: delete project
      description: delete specifed project
      operationId: deleteProject
      security:
        - roleAuth:
            - user
      produces:
        - application/json
      parameters:
        - name: projectId
          in: path
          description: project id
          required: true
          type: string
      responses:
        "200":
          description: OK
        "404":
          description: project not found
        "500":
          description: server internal error

    put:
      tags:
        - Project
      summary: update specified project
      description: ""
      operationId: updateProject
      security:
        - roleAuth:
            - user
      parameters:
        - name: projectId
          in: path
          description: project identifier
          type: string
          required: true
        - in: body
          name: project
          description: updated project
          required: true
          schema:
            $ref: "./models.json#/definitions/Project"
      responses:
        "200":
          description: successfully operation
        "404":
          description: project not found
        "500":
          description: server internal error

  /projects/{projectId}/summary:
    get:
      tags:
        - Project
      summary: get project's summary
      description: get project's summary
      operationId: getProjectSummary
      security:
        - roleAuth:
            - user
      parameters:
        - name: projectId
          in: path
          type: string
          description: projectId
          required: true
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "./models.json#/definitions/ProjectSummary"
        "404":
          description: project not found

  /projects/{projectId}/devices:
    get:
      tags:
        - Project
      summary: get project's all devices
      description: get project's devices
      operationId: getProjectDevices
      security:
        - roleAuth:
            - user
      parameters:
        - name: projectId
          in: path
          type: string
          description: projectId
          required: true
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "./models.json#/definitions/Device"
        "404":
          description: project not found

    post:
      tags:
        - Project
      summary: add device instance to project
      description: add device instance to project
      operationId: addProjectDevice
      security:
        - roleAuth:
            - user
      parameters:
        - name: projectId
          in: path
          description: specified project
          type: string
          required: true
        - in: body
          name: device
          schema:
            $ref: "./models.json#/definitions/Device"
      responses:
        "200":
          description: successful operation
        "400":
          description: bad request
        "404":
          description: project not found
        "500":
          description: server internal error

  /project/{projectId}/devices/{deviceId}:
    get:
      tags:
        - Project
      summary: geet project's specified device
      description: get project's specified device
      operationId: getProjectDevice
      security:
        - roleAuth:
            - user
      parameters:
        - name: projectId
          in: path
          description: projectId
          type: string
          required: true
        - name: deviceId
          in: path
          description: deviceId
          type: string
          required: true
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "./models.json#/definitions/Device"
        "404":
          description: project or device not found

    delete:
      tags:
        - Project
      summary: delete project's specified device
      description: delete project's specified device
      operationId: deleteProjectDevice
      security:
        - roleAuth:
            - user
      parameters:
        - name: projectId
          in: path
          description: projectId
          type: string
          required: true
        - name: deviceId
          in: path
          description: deviceId
          type: string
          required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad request
        "500":
          description: server internal error

    put:
      tags:
        - Project
      summary: update project's specified device
      description: update project's specified device
      operationId: updateProjectDevice
      security:
        - roleAuth:
            - user
      parameters:
        - name: projectId
          in: path
          description: project id
          type: string
          required: true
        - name: deviceId
          in: path
          description: device id
          type: string
          required: true
        - in: body
          name: device
          schema:
            $ref: "./models.json#/definitions/Device"
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad request
        "500":
          description: server internal error

    patch:
      tags:
        - Project
      summary: update project's specified device's status
      description: ""
      operationId: updateProjectDeviceStatus
      security:
        - roleAuth:
            - user
      parameters:
        - name: projectId
          in: path
          description: project id
          type: string
          required: true
        - name: deviceId
          in: path
          description: device id
          type: string
          required: true
        - name: field
          in: query
          description: update device's field
          type: string
          required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: Bad request
        "500":
          description: server internal error

  /devices/{deviceId}:
    post:
      tags:
        - Device
      summary: send data to device
      description: send data to device
      operationId: sendDataToDevice
      produces:
        - application/json
      parameters:
        - name: deviceId
          in: path
          description: device identifer
          type: string
          required: true
        - in: body
          name: deviceData
          description: data to device
          required: true
          schema:
            $ref: "./models.json#/definitions/DeviceData"
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad request
        "500":
          description: Server internal error

  /models:
    get:
      tags:
        - Model
      description: get specified all models
      operationId: getModels
      security:
        - roleAuth:
            - user
      parameters:
        - name: pageSize
          in: query
          description: Number of persons returned
          type: integer
        - name: pageNumber
          in: query
          description: Page number
          type: integer
        - name: q
          in: query
          description: >
            query object for.You can get query key from rulechain object. This is a json string.
            For example:
              * 模糊检索name,description,category
              {"name": "product"}
              {"description": "abcd"}
              {"category": "abcd"}
              * 多条件模糊检索(and)
              {"name": "product", "description": "abcd"}
              * (deprecated) 模糊检索created_at,updated_at
              {"created_at": "2018-10-11T09:13:26Z"}
              {"updated_at": "2018-10-11T09:13:26Z"}
              * 精确检索user_id,id,template_id,key,secret,status,data_format
              {"user_id": "bevh8dkvr53g2n6u9l70"}
              {"id": "bevh8dkvr53g2n6u9l70"}
              {"template_id": "bevh8dkvr53g2n6u9l70"}
              {"key": "bevh8dkvr53g2n6u9l70"}
              {"secret": "bevh8dkvr53g2n6u9l70"}
              {"data_format": "JSON"}
              {"data_format": "XML"}
          type: string
      responses:
        "200":
          description: successfully operation
          schema:
            type: array
            items:
              $ref: "./models.json#/definitions/DeviceModel"
        "400":
          description: Bad request
        "500":
          description: Internal error

    post:
      tags:
        - Model
      description: create device's model
      operationId: createModel
      security:
        - roleAuth:
            - user
      parameters:
        - in: body
          name: deviceModel
          schema:
            $ref: "./models.json#/definitions/DeviceModel"
      responses:
        "200":
          description: successful operation
        "400":
          description: bad request
        "404":
          description: device not found
        "500":
          description: server internal error

    put:
      tags:
        - Model
      description: update device's model
      operationId: updateModel
      security:
        - roleAuth:
            - user
      parameters:
        - in: body
          name: deviceModel
          schema:
            $ref: "./models.json#/definitions/DeviceModel"
      responses:
        "200":
          description: successful operation
        "400":
          description: bad request
        "404":
          description: device not found
        "500":
          description: server internal error

  /models/{modelId}:
    get:
      tags:
        - Model
      description: get specified model
      operationId: getModel
      security:
        - roleAuth:
            - user
      parameters:
        - name: modelId
          in: path
          description: device model id
          type: string
          required: true
      responses:
        "200":
          description: successfully operation
          schema:
            $ref: "./models.json#/definitions/DeviceModel"
        "404":
          description: model not found

    delete:
      tags:
        - Model
      description: delete device's model
      operationId: deleteModel
      security:
        - roleAuth:
            - user
      parameters:
        - name: modelId
          in: path
          description: device model identifier
          type: string
          required: true
      responses:
        "200":
          description: successful operation
        "400":
          description: bad request
        "404":
          description: model not found
        "500":
          description: server internal error

  /logs/devices/{deviceId}:
    get:
      tags:
        - Logs
      description: get specified device's log
      operationId: getDeviceLog
      security:
        - roleAuth:
            - user
      parameters:
        - name: deviceId
          in: path
          type: string
          description: deviceId
          required: true
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "./models.json#/definitions/DeviceLog"
        "404":
          description: device not found.

  /logs/projects/{projectId}:
    get:
      tags:
        - Logs
      description: get specified project's log
      operationId: getProjectLog
      security:
        - roleAuth:
            - user
      parameters:
        - name: projectId
          in: path
          type: string
          description: project id
          required: true
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "./models.json#/definitions/DeviceLog"
        "404":
          description: device not found
  /rulechains:
    get:
      tags:
        - Rulechain
      summary: get all of rule chains
      description: get all of rule chains
      operationId: getRuleChains
      security:
        - roleAuth:
            - user
      parameters:
        - name: pageSize
          in: query
          description: Number of persons returned
          type: integer
        - name: pageNumber
          in: query
          description: Page number
          type: integer
        - name: q
          in: query
          description: >
            query object for.You can get query key from rulechain object. This is a json string.
            For example:
              * 模糊检索name,description,category
              {"name": "product"}
              {"description": "abcd"}
              {"category": "abcd"}
              * 多条件模糊检索(and)
              {"name": "product", "description": "abcd"}
              * (deprecated) 模糊检索created_at,updated_at
              {"created_at": "2018-10-11T09:13:26Z"}
              {"updated_at": "2018-10-11T09:13:26Z"}
              * 精确检索user_id,id,template_id,key,secret,status,data_format
              {"user_id": "bevh8dkvr53g2n6u9l70"}
              {"id": "bevh8dkvr53g2n6u9l70"}
              {"template_id": "bevh8dkvr53g2n6u9l70"}
              {"key": "bevh8dkvr53g2n6u9l70"}
              {"secret": "bevh8dkvr53g2n6u9l70"}
              {"data_format": "JSON"}
              {"data_format": "XML"}
          type: string
      responses:
        "200":
          description: successfully operation
          schema:
            type: array
            items:
              $ref: "./models.json#/definitions/RuleChain"
            properties:
              status:
                type: boolean
                description: the result of excution
        "400":
          description: Bad request
        "404":
          description: Not found
        "500":
          description: Internal error

  /rulechains/{ruleChainId}:
    delete:
      tags:
        - Rulechain
      summary: delete rule chain
      description: delete rule chain with Id
      operationId: deleteRuleChain
      security:
        - roleAuth:
            - user
      parameters:
        - name: ruleChainId
          in: path
          description: rule chain id
          required: true
          type: string
      responses:
        "200":
          description: Delete successfully
        "404":
          description: rule chain not found
        "500":
          description: Server internal error

    get:
      tags:
        - Rulechain
      summary: get rule chain by id
      description: get  rule chain by id
      operationId: getRuleChain
      security:
        - roleAuth:
            - user
      parameters:
        - name: ruleChainId
          in: path
          description: rule chain id
          required: true
          type: string
      responses:
        "200":
          description: successfully operation
          schema:
            $ref: "./models.json#/definitions/RuleChain"
        "400":
          description: Bad request
        "404":
          description: rule chain not found
    post:
      tags:
        - Rulechain
      summary: save one rule chain
      description: save one rule chain
      operationId: saveRuleChain
      security:
        - roleAuth:
            - user
      parameters:
        - name: ruleChainId
          in: path
          description: rule chain
          required: true
          type: string
        - in: body
          name: ruleChain
          description: updated rule chain
          required: true
          schema:
            $ref: "./models.json#/definitions/RuleChain"
      responses:
        "200":
          description: Successfully operation
        "404":
          description: Rule chain not found
        "500":
          description: Server internal error

  /rulechains/{ruleChainId}/root:
    post:
      tags:
        - Rulechain
      summary: set root id
      description: set root id
      operationId: setRootRuleChain
      security:
        - roleAuth:
            - user
      parameters:
        - name: ruleChainId
          in: path
          description: rule chain id
          required: true
          type: string
      responses:
        "200":
          description: set successfully
        "404":
          description: rule chain not found
        "500":
          description: server internal error

  /rulechains/{ruleChainId}/metadata:
    get:
      tags:
        - Rulechain
      summary: get meta data of perticular rule chain
      description: get meta data of perticular rule chain
      operationId: getRuleChainMetadata
      security:
        - roleAuth:
            - user
      parameters:
        - name: ruleChainId
          in: path
          description: rule chain id
          required: true
          type: string
      responses:
        "200":
          description: execute successfully
          schema:
            type: string
        "404":
          description: rule chain metadata not found
    post:
      tags:
        - Rulechain
      summary: save meta data
      description: save meta data
      operationId: saveRuleChainMetadata
      security:
        - roleAuth:
            - user
      parameters:
        - name: ruleChainId
          in: path
          description: rule chain identifier
          required: true
          type: string
        - name: metadata
          in: body
          description: meta data
          schema:
            type: string
      responses:
        "200":
          description: excute successfully
        "400":
          description: Invalid metadata
        "404":
          description: rule chain not found

  /rulechains/{ruleChainId}/upload:
    post:
      tags:
        - Rulechain
      summary: upload all infomation of one rule chain to the system
      description: upload all infomation of one rule chain to the system
      operationId: uploadRuleChain
      security:
        - roleAuth:
            - user
      parameters:
        - name: ruleChainId
          in: path
          description: rule chain identifier
          type: string
          required: true
        - name: path
          in: formData
          description: upload address
          required: true
          type: string
      responses:
        "200":
          description: excute successfully
          schema:
            type: array
            items:
              $ref: "./models.json#/definitions/RuleChain"
            properties:
              status:
                type: boolean
                description: the result of excution
        "500":
          description: Server internal error

  /rulechains/{ruleChainId}/download:
    post:
      tags:
        - Rulechain
      summary: download all infomation of one rule chain to the local pc
      description: download all infomation of one rule chain to the local pc
      operationId: downloadRuleChain
      security:
        - roleAuth:
            - user
      parameters:
        - name: ruleChainId
          in: path
          description: download rule chain id
          required: true
          type: string
      responses:
        "200":
          description: excute successfully
          schema:
            type: object
            properties:
              status:
                type: boolean
                description: the result of excution
        "500":
          description: Server internal error

  /deployments:
    get:
      tags:
        - Deployment
      summary: get all deployments
      description: ""
      operationId: getDeployments
      security:
        - roleAuth:
            - user
      parameters:
        - name: pageSize
          in: query
          description: Number of persons returned
          type: integer
        - name: pageNumber
          in: query
          description: Page number
          type: integer
        - name: q
          in: query
          description: >
            query object for.You can get query key from rulechain object. This is a json string.
            For example:
              * 模糊检索name,description,category
              {"name": "product"}
              {"description": "abcd"}
              {"category": "abcd"}
              * 多条件模糊检索(and)
              {"name": "product", "description": "abcd"}
              * (deprecated) 模糊检索created_at,updated_at
              {"created_at": "2018-10-11T09:13:26Z"}
              {"updated_at": "2018-10-11T09:13:26Z"}
              * 精确检索user_id,id,template_id,key,secret,status,data_format
              {"user_id": "bevh8dkvr53g2n6u9l70"}
              {"id": "bevh8dkvr53g2n6u9l70"}
              {"template_id": "bevh8dkvr53g2n6u9l70"}
              {"key": "bevh8dkvr53g2n6u9l70"}
              {"secret": "bevh8dkvr53g2n6u9l70"}
              {"data_format": "JSON"}
              {"data_format": "XML"}
          type: string
      responses:
        "200":
          description: successfully operation
          schema:
            type: array
            items:
              $ref: "./models.json#/definitions/Deployment"
            properties:
              status:
                type: boolean
        "400":
          description: Internal server rooro
        default:
          description: failed operation
          schema:
            type: object
            properties:
              message:
                type: string
    post:
      tags:
        - Deployment
      summary: create a new deployment
      description: create a new deployment
      operationId: createDeployment
      security:
        - roleAuth:
            - user
      parameters:
        - in: body
          name: deployment
          description: deployment information
          required: true
          schema:
            $ref: "./models.json#/definitions/Deployment"
      responses:
        "200":
          description: Successfully operation
          schema:
            $ref: "./models.json#/definitions/Deployment"
        "400":
          description: Bad request
        "405":
          description: Invalid condition

  /deployments/{deploymentId}:
    get:
      tags:
        - Deployment
      summary: get specified deployment
      description: ""
      operationId: getDeployment
      security:
        - roleAuth:
            - user

      parameters:
        - name: deploymentId
          in: path
          description: deployment identifier
          type: string
          required: true
      responses:
        "200":
          description: successfully operation
          schema:
            $ref: "./models.json#/definitions/Deployment"
        "404":
          description: deployment not found

    delete:
      tags:
        - Deployment
      summary: delete specified deployment
      description: ""
      operationId: deleteDeployment
      security:
        - roleAuth:
            - user

      parameters:
        - name: deploymentId
          in: path
          description: deployment identifier
          type: string
          required: true
      responses:
        "200":
          description: successfully operation
        "404":
          description: deployment not found

    put:
      tags:
        - Deployment
      summary: update specified deployment
      description: ""
      operationId: updateDeployment
      security:
        - roleAuth:
            - user
      parameters:
        - name: deploymentId
          in: path
          description: deployment identifier
          type: string
          required: true
        - in: body
          name: deployment
          description: updated deployment
          required: true
          schema:
            $ref: "./models.json#/definitions/Deployment"
      responses:
        "200":
          description: successfully operation
        "404":
          description: deployment not found

    patch:
      tags:
        - Deployment
      summary: update specified deployment
      description: ""
      operationId: setDeploymentStatus
      security:
        - roleAuth:
            - user

      parameters:
        - name: deploymentId
          in: path
          description: deployment identifier
          type: string
          required: true
        - in: body
          name: deploymentControl
          description: start or stop deployment
          required: true
          schema:
            $ref: "./models.json#/definitions/DeploymentControl"
      responses:
        "200":
          description: Successfully operation
        "400":
          description: Invalid deployment Id
        "404":
          description: Deployment not found
        "405":
          description: Deployment exception

definitions:
  Timedef:
    type: object
    properties:
      created:
        type: string
        format: dateTime
        readOnly: true
      updated:
        type: string
        format: dateTime
        readOnly: true
    example:
      created: '2018-09-20T11:05:54Z'
      updated: '2018-09-20T11:05:54Z'

  LoginToken:
    type: object
    properties:
      access_token:
        type: string
      token_type:
        type: string
  SignupUser:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      email:
        type: string
      phone:
        type: string
      roles:
        type: array
        items:
          type: string
          enum:
            - admin
            - user
  User:
    allOf:
      - $ref: '#/definitions/Timedef'
      - properties:
          id:
            type: string
          username:
            type: string
          email:
            type: string
          phone:
            type: string
          status:
            type: string
            enum:
              - OFFLINE
              - ONLINE
          roles:
            type: array
            items:
              type: string
              enum:
                - admin
                - user
        example:
          id: behnu4h42p0bs8a5qukg
          username: admin
          email: admin@cloudstone.com
          phone: '123456789'
          status: OFFLINE
          productNum: '0'
          totalFund: '0'
          balance: '0'
          roles:
            - admin
            - user
  UserOverview:
    type: object
    properties:
      totalNum:
        type: integer
      onlineNum:
        type: integer
      todayLoginNum:
        type: integer
      dayAveLoginNum:
        type: integer
    required:
      - totalNum
      - onlineNum
      - todayLoginNum
      - dayAveLoginNum
  UserLoginRecord:
    required:
      - number
    type: object
    properties:
      date:
        type: string
        format: dateTime
      number:
        type: integer