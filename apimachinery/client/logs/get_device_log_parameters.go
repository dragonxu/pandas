// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDeviceLogParams creates a new GetDeviceLogParams object
// with the default values initialized.
func NewGetDeviceLogParams() *GetDeviceLogParams {
	var ()
	return &GetDeviceLogParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeviceLogParamsWithTimeout creates a new GetDeviceLogParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDeviceLogParamsWithTimeout(timeout time.Duration) *GetDeviceLogParams {
	var ()
	return &GetDeviceLogParams{

		timeout: timeout,
	}
}

// NewGetDeviceLogParamsWithContext creates a new GetDeviceLogParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDeviceLogParamsWithContext(ctx context.Context) *GetDeviceLogParams {
	var ()
	return &GetDeviceLogParams{

		Context: ctx,
	}
}

// NewGetDeviceLogParamsWithHTTPClient creates a new GetDeviceLogParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDeviceLogParamsWithHTTPClient(client *http.Client) *GetDeviceLogParams {
	var ()
	return &GetDeviceLogParams{
		HTTPClient: client,
	}
}

/*GetDeviceLogParams contains all the parameters to send to the API endpoint
for the get device log operation typically these are written to a http.Request
*/
type GetDeviceLogParams struct {

	/*DeviceID
	  deviceId

	*/
	DeviceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get device log params
func (o *GetDeviceLogParams) WithTimeout(timeout time.Duration) *GetDeviceLogParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get device log params
func (o *GetDeviceLogParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get device log params
func (o *GetDeviceLogParams) WithContext(ctx context.Context) *GetDeviceLogParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get device log params
func (o *GetDeviceLogParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get device log params
func (o *GetDeviceLogParams) WithHTTPClient(client *http.Client) *GetDeviceLogParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get device log params
func (o *GetDeviceLogParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeviceID adds the deviceID to the get device log params
func (o *GetDeviceLogParams) WithDeviceID(deviceID string) *GetDeviceLogParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the get device log params
func (o *GetDeviceLogParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeviceLogParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param deviceId
	if err := r.SetPathParam("deviceId", o.DeviceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
