// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/cloustone/pandas/models"
)

// GetProjectLogReader is a Reader for the GetProjectLog structure.
type GetProjectLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectLogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetProjectLogNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetProjectLogOK creates a GetProjectLogOK with default headers values
func NewGetProjectLogOK() *GetProjectLogOK {
	return &GetProjectLogOK{}
}

/*GetProjectLogOK handles this case with default header values.

successful operation
*/
type GetProjectLogOK struct {
	Payload []*models.DeviceLog
}

func (o *GetProjectLogOK) Error() string {
	return fmt.Sprintf("[GET /logs/projects/{projectId}][%d] getProjectLogOK  %+v", 200, o.Payload)
}

func (o *GetProjectLogOK) GetPayload() []*models.DeviceLog {
	return o.Payload
}

func (o *GetProjectLogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectLogNotFound creates a GetProjectLogNotFound with default headers values
func NewGetProjectLogNotFound() *GetProjectLogNotFound {
	return &GetProjectLogNotFound{}
}

/*GetProjectLogNotFound handles this case with default header values.

device not found
*/
type GetProjectLogNotFound struct {
}

func (o *GetProjectLogNotFound) Error() string {
	return fmt.Sprintf("[GET /logs/projects/{projectId}][%d] getProjectLogNotFound ", 404)
}

func (o *GetProjectLogNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
