// Code generated by go-swagger; DO NOT EDIT.

package deployment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// SetDeploymentStatusReader is a Reader for the SetDeploymentStatus structure.
type SetDeploymentStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetDeploymentStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetDeploymentStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetDeploymentStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetDeploymentStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 405:
		result := NewSetDeploymentStatusMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSetDeploymentStatusOK creates a SetDeploymentStatusOK with default headers values
func NewSetDeploymentStatusOK() *SetDeploymentStatusOK {
	return &SetDeploymentStatusOK{}
}

/*SetDeploymentStatusOK handles this case with default header values.

Successfully operation
*/
type SetDeploymentStatusOK struct {
}

func (o *SetDeploymentStatusOK) Error() string {
	return fmt.Sprintf("[PATCH /deployments/{deploymentId}][%d] setDeploymentStatusOK ", 200)
}

func (o *SetDeploymentStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetDeploymentStatusBadRequest creates a SetDeploymentStatusBadRequest with default headers values
func NewSetDeploymentStatusBadRequest() *SetDeploymentStatusBadRequest {
	return &SetDeploymentStatusBadRequest{}
}

/*SetDeploymentStatusBadRequest handles this case with default header values.

Invalid deployment Id
*/
type SetDeploymentStatusBadRequest struct {
}

func (o *SetDeploymentStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /deployments/{deploymentId}][%d] setDeploymentStatusBadRequest ", 400)
}

func (o *SetDeploymentStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetDeploymentStatusNotFound creates a SetDeploymentStatusNotFound with default headers values
func NewSetDeploymentStatusNotFound() *SetDeploymentStatusNotFound {
	return &SetDeploymentStatusNotFound{}
}

/*SetDeploymentStatusNotFound handles this case with default header values.

Deployment not found
*/
type SetDeploymentStatusNotFound struct {
}

func (o *SetDeploymentStatusNotFound) Error() string {
	return fmt.Sprintf("[PATCH /deployments/{deploymentId}][%d] setDeploymentStatusNotFound ", 404)
}

func (o *SetDeploymentStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetDeploymentStatusMethodNotAllowed creates a SetDeploymentStatusMethodNotAllowed with default headers values
func NewSetDeploymentStatusMethodNotAllowed() *SetDeploymentStatusMethodNotAllowed {
	return &SetDeploymentStatusMethodNotAllowed{}
}

/*SetDeploymentStatusMethodNotAllowed handles this case with default header values.

Deployment exception
*/
type SetDeploymentStatusMethodNotAllowed struct {
}

func (o *SetDeploymentStatusMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /deployments/{deploymentId}][%d] setDeploymentStatusMethodNotAllowed ", 405)
}

func (o *SetDeploymentStatusMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
