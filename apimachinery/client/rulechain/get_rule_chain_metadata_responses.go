// Code generated by go-swagger; DO NOT EDIT.

package rulechain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetRuleChainMetadataReader is a Reader for the GetRuleChainMetadata structure.
type GetRuleChainMetadataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRuleChainMetadataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRuleChainMetadataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetRuleChainMetadataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRuleChainMetadataOK creates a GetRuleChainMetadataOK with default headers values
func NewGetRuleChainMetadataOK() *GetRuleChainMetadataOK {
	return &GetRuleChainMetadataOK{}
}

/*GetRuleChainMetadataOK handles this case with default header values.

execute successfully
*/
type GetRuleChainMetadataOK struct {
	Payload string
}

func (o *GetRuleChainMetadataOK) Error() string {
	return fmt.Sprintf("[GET /rulechains/{ruleChainId}/metadata][%d] getRuleChainMetadataOK  %+v", 200, o.Payload)
}

func (o *GetRuleChainMetadataOK) GetPayload() string {
	return o.Payload
}

func (o *GetRuleChainMetadataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRuleChainMetadataNotFound creates a GetRuleChainMetadataNotFound with default headers values
func NewGetRuleChainMetadataNotFound() *GetRuleChainMetadataNotFound {
	return &GetRuleChainMetadataNotFound{}
}

/*GetRuleChainMetadataNotFound handles this case with default header values.

rule chain metadata not found
*/
type GetRuleChainMetadataNotFound struct {
}

func (o *GetRuleChainMetadataNotFound) Error() string {
	return fmt.Sprintf("[GET /rulechains/{ruleChainId}/metadata][%d] getRuleChainMetadataNotFound ", 404)
}

func (o *GetRuleChainMetadataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
