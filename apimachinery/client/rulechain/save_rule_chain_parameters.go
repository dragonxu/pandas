// Code generated by go-swagger; DO NOT EDIT.

package rulechain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/cloustone/pandas/models"
)

// NewSaveRuleChainParams creates a new SaveRuleChainParams object
// with the default values initialized.
func NewSaveRuleChainParams() *SaveRuleChainParams {
	var ()
	return &SaveRuleChainParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSaveRuleChainParamsWithTimeout creates a new SaveRuleChainParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSaveRuleChainParamsWithTimeout(timeout time.Duration) *SaveRuleChainParams {
	var ()
	return &SaveRuleChainParams{

		timeout: timeout,
	}
}

// NewSaveRuleChainParamsWithContext creates a new SaveRuleChainParams object
// with the default values initialized, and the ability to set a context for a request
func NewSaveRuleChainParamsWithContext(ctx context.Context) *SaveRuleChainParams {
	var ()
	return &SaveRuleChainParams{

		Context: ctx,
	}
}

// NewSaveRuleChainParamsWithHTTPClient creates a new SaveRuleChainParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSaveRuleChainParamsWithHTTPClient(client *http.Client) *SaveRuleChainParams {
	var ()
	return &SaveRuleChainParams{
		HTTPClient: client,
	}
}

/*SaveRuleChainParams contains all the parameters to send to the API endpoint
for the save rule chain operation typically these are written to a http.Request
*/
type SaveRuleChainParams struct {

	/*RuleChain
	  updated rule chain

	*/
	RuleChain models.RuleChain
	/*RuleChainID
	  rule chain

	*/
	RuleChainID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the save rule chain params
func (o *SaveRuleChainParams) WithTimeout(timeout time.Duration) *SaveRuleChainParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the save rule chain params
func (o *SaveRuleChainParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the save rule chain params
func (o *SaveRuleChainParams) WithContext(ctx context.Context) *SaveRuleChainParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the save rule chain params
func (o *SaveRuleChainParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the save rule chain params
func (o *SaveRuleChainParams) WithHTTPClient(client *http.Client) *SaveRuleChainParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the save rule chain params
func (o *SaveRuleChainParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRuleChain adds the ruleChain to the save rule chain params
func (o *SaveRuleChainParams) WithRuleChain(ruleChain models.RuleChain) *SaveRuleChainParams {
	o.SetRuleChain(ruleChain)
	return o
}

// SetRuleChain adds the ruleChain to the save rule chain params
func (o *SaveRuleChainParams) SetRuleChain(ruleChain models.RuleChain) {
	o.RuleChain = ruleChain
}

// WithRuleChainID adds the ruleChainID to the save rule chain params
func (o *SaveRuleChainParams) WithRuleChainID(ruleChainID string) *SaveRuleChainParams {
	o.SetRuleChainID(ruleChainID)
	return o
}

// SetRuleChainID adds the ruleChainId to the save rule chain params
func (o *SaveRuleChainParams) SetRuleChainID(ruleChainID string) {
	o.RuleChainID = ruleChainID
}

// WriteToRequest writes these params to a swagger request
func (o *SaveRuleChainParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.RuleChain != nil {
		if err := r.SetBodyParam(o.RuleChain); err != nil {
			return err
		}
	}

	// path param ruleChainId
	if err := r.SetPathParam("ruleChainId", o.RuleChainID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
