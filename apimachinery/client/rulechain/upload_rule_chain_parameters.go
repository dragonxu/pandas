// Code generated by go-swagger; DO NOT EDIT.

package rulechain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadRuleChainParams creates a new UploadRuleChainParams object
// with the default values initialized.
func NewUploadRuleChainParams() *UploadRuleChainParams {
	var ()
	return &UploadRuleChainParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUploadRuleChainParamsWithTimeout creates a new UploadRuleChainParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadRuleChainParamsWithTimeout(timeout time.Duration) *UploadRuleChainParams {
	var ()
	return &UploadRuleChainParams{

		timeout: timeout,
	}
}

// NewUploadRuleChainParamsWithContext creates a new UploadRuleChainParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadRuleChainParamsWithContext(ctx context.Context) *UploadRuleChainParams {
	var ()
	return &UploadRuleChainParams{

		Context: ctx,
	}
}

// NewUploadRuleChainParamsWithHTTPClient creates a new UploadRuleChainParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadRuleChainParamsWithHTTPClient(client *http.Client) *UploadRuleChainParams {
	var ()
	return &UploadRuleChainParams{
		HTTPClient: client,
	}
}

/*UploadRuleChainParams contains all the parameters to send to the API endpoint
for the upload rule chain operation typically these are written to a http.Request
*/
type UploadRuleChainParams struct {

	/*Path
	  upload address

	*/
	Path string
	/*RuleChainID
	  rule chain identifier

	*/
	RuleChainID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload rule chain params
func (o *UploadRuleChainParams) WithTimeout(timeout time.Duration) *UploadRuleChainParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload rule chain params
func (o *UploadRuleChainParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload rule chain params
func (o *UploadRuleChainParams) WithContext(ctx context.Context) *UploadRuleChainParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload rule chain params
func (o *UploadRuleChainParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload rule chain params
func (o *UploadRuleChainParams) WithHTTPClient(client *http.Client) *UploadRuleChainParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload rule chain params
func (o *UploadRuleChainParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPath adds the path to the upload rule chain params
func (o *UploadRuleChainParams) WithPath(path string) *UploadRuleChainParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the upload rule chain params
func (o *UploadRuleChainParams) SetPath(path string) {
	o.Path = path
}

// WithRuleChainID adds the ruleChainID to the upload rule chain params
func (o *UploadRuleChainParams) WithRuleChainID(ruleChainID string) *UploadRuleChainParams {
	o.SetRuleChainID(ruleChainID)
	return o
}

// SetRuleChainID adds the ruleChainId to the upload rule chain params
func (o *UploadRuleChainParams) SetRuleChainID(ruleChainID string) {
	o.RuleChainID = ruleChainID
}

// WriteToRequest writes these params to a swagger request
func (o *UploadRuleChainParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form param path
	frPath := o.Path
	fPath := frPath
	if fPath != "" {
		if err := r.SetFormParam("path", fPath); err != nil {
			return err
		}
	}

	// path param ruleChainId
	if err := r.SetPathParam("ruleChainId", o.RuleChainID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
