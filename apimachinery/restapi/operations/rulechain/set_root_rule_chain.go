// Code generated by go-swagger; DO NOT EDIT.

package rulechain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"github.com/cloustone/pandas/models"
)

// SetRootRuleChainHandlerFunc turns a function with the right signature into a set root rule chain handler
type SetRootRuleChainHandlerFunc func(SetRootRuleChainParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn SetRootRuleChainHandlerFunc) Handle(params SetRootRuleChainParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// SetRootRuleChainHandler interface for that can handle valid set root rule chain params
type SetRootRuleChainHandler interface {
	Handle(SetRootRuleChainParams, *models.Principal) middleware.Responder
}

// NewSetRootRuleChain creates a new http.Handler for the set root rule chain operation
func NewSetRootRuleChain(ctx *middleware.Context, handler SetRootRuleChainHandler) *SetRootRuleChain {
	return &SetRootRuleChain{Context: ctx, Handler: handler}
}

/*SetRootRuleChain swagger:route POST /rulechains/{ruleChainId}/root Rulechain setRootRuleChain

set root id

set root id

*/
type SetRootRuleChain struct {
	Context *middleware.Context
	Handler SetRootRuleChainHandler
}

func (o *SetRootRuleChain) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetRootRuleChainParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
