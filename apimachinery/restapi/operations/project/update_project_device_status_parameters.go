// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateProjectDeviceStatusParams creates a new UpdateProjectDeviceStatusParams object
// no default values defined in spec.
func NewUpdateProjectDeviceStatusParams() UpdateProjectDeviceStatusParams {

	return UpdateProjectDeviceStatusParams{}
}

// UpdateProjectDeviceStatusParams contains all the bound params for the update project device status operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateProjectDeviceStatus
type UpdateProjectDeviceStatusParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*device id
	  Required: true
	  In: path
	*/
	DeviceID string
	/*update device's field
	  Required: true
	  In: query
	*/
	Field string
	/*project id
	  Required: true
	  In: path
	*/
	ProjectID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUpdateProjectDeviceStatusParams() beforehand.
func (o *UpdateProjectDeviceStatusParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rDeviceID, rhkDeviceID, _ := route.Params.GetOK("deviceId")
	if err := o.bindDeviceID(rDeviceID, rhkDeviceID, route.Formats); err != nil {
		res = append(res, err)
	}

	qField, qhkField, _ := qs.GetOK("field")
	if err := o.bindField(qField, qhkField, route.Formats); err != nil {
		res = append(res, err)
	}

	rProjectID, rhkProjectID, _ := route.Params.GetOK("projectId")
	if err := o.bindProjectID(rProjectID, rhkProjectID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDeviceID binds and validates parameter DeviceID from path.
func (o *UpdateProjectDeviceStatusParams) bindDeviceID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.DeviceID = raw

	return nil
}

// bindField binds and validates parameter Field from query.
func (o *UpdateProjectDeviceStatusParams) bindField(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("field", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("field", "query", raw); err != nil {
		return err
	}

	o.Field = raw

	return nil
}

// bindProjectID binds and validates parameter ProjectID from path.
func (o *UpdateProjectDeviceStatusParams) bindProjectID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ProjectID = raw

	return nil
}
