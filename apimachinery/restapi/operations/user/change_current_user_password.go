// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	"github.com/cloustone/pandas/apimachinery/models"
)

// ChangeCurrentUserPasswordHandlerFunc turns a function with the right signature into a change current user password handler
type ChangeCurrentUserPasswordHandlerFunc func(ChangeCurrentUserPasswordParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ChangeCurrentUserPasswordHandlerFunc) Handle(params ChangeCurrentUserPasswordParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ChangeCurrentUserPasswordHandler interface for that can handle valid change current user password params
type ChangeCurrentUserPasswordHandler interface {
	Handle(ChangeCurrentUserPasswordParams, *models.Principal) middleware.Responder
}

// NewChangeCurrentUserPassword creates a new http.Handler for the change current user password operation
func NewChangeCurrentUserPassword(ctx *middleware.Context, handler ChangeCurrentUserPasswordHandler) *ChangeCurrentUserPassword {
	return &ChangeCurrentUserPassword{Context: ctx, Handler: handler}
}

/*ChangeCurrentUserPassword swagger:route PATCH /users/password User changeCurrentUserPassword

change current user's password

This can only be done by the logged in user.

*/
type ChangeCurrentUserPassword struct {
	Context *middleware.Context
	Handler ChangeCurrentUserPasswordHandler
}

func (o *ChangeCurrentUserPassword) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewChangeCurrentUserPasswordParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ChangeCurrentUserPasswordBody change current user password body
// swagger:model ChangeCurrentUserPasswordBody
type ChangeCurrentUserPasswordBody struct {

	// new passowrd
	NewPassowrd string `json:"new_passowrd,omitempty"`

	// old password
	OldPassword string `json:"old_password,omitempty"`
}

// Validate validates this change current user password body
func (o *ChangeCurrentUserPasswordBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ChangeCurrentUserPasswordBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangeCurrentUserPasswordBody) UnmarshalBinary(b []byte) error {
	var res ChangeCurrentUserPasswordBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
