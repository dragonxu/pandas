// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	"github.com/cloustone/pandas/models"
)

// UpdateUserHandlerFunc turns a function with the right signature into a update user handler
type UpdateUserHandlerFunc func(UpdateUserParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateUserHandlerFunc) Handle(params UpdateUserParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// UpdateUserHandler interface for that can handle valid update user params
type UpdateUserHandler interface {
	Handle(UpdateUserParams, *models.Principal) middleware.Responder
}

// NewUpdateUser creates a new http.Handler for the update user operation
func NewUpdateUser(ctx *middleware.Context, handler UpdateUserHandler) *UpdateUser {
	return &UpdateUser{Context: ctx, Handler: handler}
}

/*UpdateUser swagger:route PUT /users/{userId} User updateUser

Updated user by id

This can only be done by the logged in user.

*/
type UpdateUser struct {
	Context *middleware.Context
	Handler UpdateUserHandler
}

func (o *UpdateUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateUserParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateUserBody update user body
// swagger:model UpdateUserBody
type UpdateUserBody struct {

	// email
	Email string `json:"email,omitempty"`

	// phone
	Phone string `json:"phone,omitempty"`

	// roles
	Roles []string `json:"roles"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this update user body
func (o *UpdateUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateUserBodyRolesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","user"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateUserBodyRolesItemsEnum = append(updateUserBodyRolesItemsEnum, v)
	}
}

func (o *UpdateUserBody) validateRolesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updateUserBodyRolesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (o *UpdateUserBody) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(o.Roles) { // not required
		return nil
	}

	for i := 0; i < len(o.Roles); i++ {

		// value enum
		if err := o.validateRolesItemsEnum("user"+"."+"roles"+"."+strconv.Itoa(i), "body", o.Roles[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
