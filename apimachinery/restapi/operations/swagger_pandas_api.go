// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cloustone/pandas/apimachinery/restapi/operations/dashboard"
	"github.com/cloustone/pandas/apimachinery/restapi/operations/deployment"
	"github.com/cloustone/pandas/apimachinery/restapi/operations/device"
	"github.com/cloustone/pandas/apimachinery/restapi/operations/logs"
	"github.com/cloustone/pandas/apimachinery/restapi/operations/model"
	"github.com/cloustone/pandas/apimachinery/restapi/operations/project"
	"github.com/cloustone/pandas/apimachinery/restapi/operations/rulechain"
	"github.com/cloustone/pandas/apimachinery/restapi/operations/user"
	"github.com/cloustone/pandas/models"
)

// NewSwaggerPandasAPI creates a new SwaggerPandas instance
func NewSwaggerPandasAPI(spec *loads.Document) *SwaggerPandasAPI {
	return &SwaggerPandasAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		UrlformConsumer:     runtime.DiscardConsumer,
		JSONProducer:        runtime.JSONProducer(),
		UserChangeCurrentUserPasswordHandler: user.ChangeCurrentUserPasswordHandlerFunc(func(params user.ChangeCurrentUserPasswordParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserChangeCurrentUserPassword has not yet been implemented")
		}), UserChangeUserPasswordHandler: user.ChangeUserPasswordHandlerFunc(func(params user.ChangeUserPasswordParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserChangeUserPassword has not yet been implemented")
		}), ProjectGetProjectsProjectIDHandler: project.GetProjectsProjectIDHandlerFunc(func(params project.GetProjectsProjectIDParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ProjectGetProjectsProjectID has not yet been implemented")
		}), ProjectAddProjectDeviceHandler: project.AddProjectDeviceHandlerFunc(func(params project.AddProjectDeviceParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ProjectAddProjectDevice has not yet been implemented")
		}), DeploymentCreateDeploymentHandler: deployment.CreateDeploymentHandlerFunc(func(params deployment.CreateDeploymentParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DeploymentCreateDeployment has not yet been implemented")
		}), ModelCreateModelHandler: model.CreateModelHandlerFunc(func(params model.CreateModelParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ModelCreateModel has not yet been implemented")
		}), ProjectCreateProjectHandler: project.CreateProjectHandlerFunc(func(params project.CreateProjectParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ProjectCreateProject has not yet been implemented")
		}), DeploymentDeleteDeploymentHandler: deployment.DeleteDeploymentHandlerFunc(func(params deployment.DeleteDeploymentParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DeploymentDeleteDeployment has not yet been implemented")
		}), ModelDeleteModelHandler: model.DeleteModelHandlerFunc(func(params model.DeleteModelParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ModelDeleteModel has not yet been implemented")
		}), ProjectDeleteProjectHandler: project.DeleteProjectHandlerFunc(func(params project.DeleteProjectParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ProjectDeleteProject has not yet been implemented")
		}), ProjectDeleteProjectDeviceHandler: project.DeleteProjectDeviceHandlerFunc(func(params project.DeleteProjectDeviceParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ProjectDeleteProjectDevice has not yet been implemented")
		}), RulechainDeleteRuleChainHandler: rulechain.DeleteRuleChainHandlerFunc(func(params rulechain.DeleteRuleChainParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation RulechainDeleteRuleChain has not yet been implemented")
		}), UserDeleteUserHandler: user.DeleteUserHandlerFunc(func(params user.DeleteUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserDeleteUser has not yet been implemented")
		}), RulechainDownloadRuleChainHandler: rulechain.DownloadRuleChainHandlerFunc(func(params rulechain.DownloadRuleChainParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation RulechainDownloadRuleChain has not yet been implemented")
		}), DashboardGetDashboardHandler: dashboard.GetDashboardHandlerFunc(func(params dashboard.GetDashboardParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DashboardGetDashboard has not yet been implemented")
		}), DeploymentGetDeploymentHandler: deployment.GetDeploymentHandlerFunc(func(params deployment.GetDeploymentParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DeploymentGetDeployment has not yet been implemented")
		}), DeploymentGetDeploymentsHandler: deployment.GetDeploymentsHandlerFunc(func(params deployment.GetDeploymentsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DeploymentGetDeployments has not yet been implemented")
		}), LogsGetDeviceLogHandler: logs.GetDeviceLogHandlerFunc(func(params logs.GetDeviceLogParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation LogsGetDeviceLog has not yet been implemented")
		}), ModelGetModelHandler: model.GetModelHandlerFunc(func(params model.GetModelParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ModelGetModel has not yet been implemented")
		}), ModelGetModelsHandler: model.GetModelsHandlerFunc(func(params model.GetModelsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ModelGetModels has not yet been implemented")
		}), ProjectGetProjectDeviceHandler: project.GetProjectDeviceHandlerFunc(func(params project.GetProjectDeviceParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ProjectGetProjectDevice has not yet been implemented")
		}), ProjectGetProjectDevicesHandler: project.GetProjectDevicesHandlerFunc(func(params project.GetProjectDevicesParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ProjectGetProjectDevices has not yet been implemented")
		}), LogsGetProjectLogHandler: logs.GetProjectLogHandlerFunc(func(params logs.GetProjectLogParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation LogsGetProjectLog has not yet been implemented")
		}), ProjectGetProjectSummaryHandler: project.GetProjectSummaryHandlerFunc(func(params project.GetProjectSummaryParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ProjectGetProjectSummary has not yet been implemented")
		}), ProjectGetProjectsHandler: project.GetProjectsHandlerFunc(func(params project.GetProjectsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ProjectGetProjects has not yet been implemented")
		}), RulechainGetRuleChainHandler: rulechain.GetRuleChainHandlerFunc(func(params rulechain.GetRuleChainParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation RulechainGetRuleChain has not yet been implemented")
		}), RulechainGetRuleChainMetadataHandler: rulechain.GetRuleChainMetadataHandlerFunc(func(params rulechain.GetRuleChainMetadataParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation RulechainGetRuleChainMetadata has not yet been implemented")
		}), RulechainGetRuleChainsHandler: rulechain.GetRuleChainsHandlerFunc(func(params rulechain.GetRuleChainsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation RulechainGetRuleChains has not yet been implemented")
		}), UserGetUserHandler: user.GetUserHandlerFunc(func(params user.GetUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserGetUser has not yet been implemented")
		}), UserLoginUserHandler: user.LoginUserHandlerFunc(func(params user.LoginUserParams) middleware.Responder {
			return middleware.NotImplemented("operation UserLoginUser has not yet been implemented")
		}), UserLogoutUserHandler: user.LogoutUserHandlerFunc(func(params user.LogoutUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserLogoutUser has not yet been implemented")
		}), RulechainSaveRuleChainHandler: rulechain.SaveRuleChainHandlerFunc(func(params rulechain.SaveRuleChainParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation RulechainSaveRuleChain has not yet been implemented")
		}), RulechainSaveRuleChainMetadataHandler: rulechain.SaveRuleChainMetadataHandlerFunc(func(params rulechain.SaveRuleChainMetadataParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation RulechainSaveRuleChainMetadata has not yet been implemented")
		}), DeviceSendDataToDeviceHandler: device.SendDataToDeviceHandlerFunc(func(params device.SendDataToDeviceParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DeviceSendDataToDevice has not yet been implemented")
		}), DeploymentSetDeploymentStatusHandler: deployment.SetDeploymentStatusHandlerFunc(func(params deployment.SetDeploymentStatusParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DeploymentSetDeploymentStatus has not yet been implemented")
		}), RulechainSetRootRuleChainHandler: rulechain.SetRootRuleChainHandlerFunc(func(params rulechain.SetRootRuleChainParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation RulechainSetRootRuleChain has not yet been implemented")
		}), DeploymentUpdateDeploymentHandler: deployment.UpdateDeploymentHandlerFunc(func(params deployment.UpdateDeploymentParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation DeploymentUpdateDeployment has not yet been implemented")
		}), ModelUpdateModelHandler: model.UpdateModelHandlerFunc(func(params model.UpdateModelParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ModelUpdateModel has not yet been implemented")
		}), ProjectUpdateProjectHandler: project.UpdateProjectHandlerFunc(func(params project.UpdateProjectParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ProjectUpdateProject has not yet been implemented")
		}), ProjectUpdateProjectDeviceHandler: project.UpdateProjectDeviceHandlerFunc(func(params project.UpdateProjectDeviceParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ProjectUpdateProjectDevice has not yet been implemented")
		}), ProjectUpdateProjectDeviceStatusHandler: project.UpdateProjectDeviceStatusHandlerFunc(func(params project.UpdateProjectDeviceStatusParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation ProjectUpdateProjectDeviceStatus has not yet been implemented")
		}), UserUpdateUserHandler: user.UpdateUserHandlerFunc(func(params user.UpdateUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation UserUpdateUser has not yet been implemented")
		}), RulechainUploadRuleChainHandler: rulechain.UploadRuleChainHandlerFunc(func(params rulechain.UploadRuleChainParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation RulechainUploadRuleChain has not yet been implemented")
		}),
		RoleAuthAuth: func(token string, scopes []string) (*models.Principal, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (roleAuth) has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*SwaggerPandasAPI This is a pandas api server. */
type SwaggerPandasAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator
	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// UrlformConsumer registers a consumer for the following mime types:
	//   - application/x-www-form-urlencoded
	UrlformConsumer runtime.Consumer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// RoleAuthAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	RoleAuthAuth func(string, []string) (*models.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// UserChangeCurrentUserPasswordHandler sets the operation handler for the change current user password operation
	UserChangeCurrentUserPasswordHandler user.ChangeCurrentUserPasswordHandler
	// UserChangeUserPasswordHandler sets the operation handler for the change user password operation
	UserChangeUserPasswordHandler user.ChangeUserPasswordHandler
	// ProjectGetProjectsProjectIDHandler sets the operation handler for the get projects project ID operation
	ProjectGetProjectsProjectIDHandler project.GetProjectsProjectIDHandler
	// ProjectAddProjectDeviceHandler sets the operation handler for the add project device operation
	ProjectAddProjectDeviceHandler project.AddProjectDeviceHandler
	// DeploymentCreateDeploymentHandler sets the operation handler for the create deployment operation
	DeploymentCreateDeploymentHandler deployment.CreateDeploymentHandler
	// ModelCreateModelHandler sets the operation handler for the create model operation
	ModelCreateModelHandler model.CreateModelHandler
	// ProjectCreateProjectHandler sets the operation handler for the create project operation
	ProjectCreateProjectHandler project.CreateProjectHandler
	// DeploymentDeleteDeploymentHandler sets the operation handler for the delete deployment operation
	DeploymentDeleteDeploymentHandler deployment.DeleteDeploymentHandler
	// ModelDeleteModelHandler sets the operation handler for the delete model operation
	ModelDeleteModelHandler model.DeleteModelHandler
	// ProjectDeleteProjectHandler sets the operation handler for the delete project operation
	ProjectDeleteProjectHandler project.DeleteProjectHandler
	// ProjectDeleteProjectDeviceHandler sets the operation handler for the delete project device operation
	ProjectDeleteProjectDeviceHandler project.DeleteProjectDeviceHandler
	// RulechainDeleteRuleChainHandler sets the operation handler for the delete rule chain operation
	RulechainDeleteRuleChainHandler rulechain.DeleteRuleChainHandler
	// UserDeleteUserHandler sets the operation handler for the delete user operation
	UserDeleteUserHandler user.DeleteUserHandler
	// RulechainDownloadRuleChainHandler sets the operation handler for the download rule chain operation
	RulechainDownloadRuleChainHandler rulechain.DownloadRuleChainHandler
	// DashboardGetDashboardHandler sets the operation handler for the get dashboard operation
	DashboardGetDashboardHandler dashboard.GetDashboardHandler
	// DeploymentGetDeploymentHandler sets the operation handler for the get deployment operation
	DeploymentGetDeploymentHandler deployment.GetDeploymentHandler
	// DeploymentGetDeploymentsHandler sets the operation handler for the get deployments operation
	DeploymentGetDeploymentsHandler deployment.GetDeploymentsHandler
	// LogsGetDeviceLogHandler sets the operation handler for the get device log operation
	LogsGetDeviceLogHandler logs.GetDeviceLogHandler
	// ModelGetModelHandler sets the operation handler for the get model operation
	ModelGetModelHandler model.GetModelHandler
	// ModelGetModelsHandler sets the operation handler for the get models operation
	ModelGetModelsHandler model.GetModelsHandler
	// ProjectGetProjectDeviceHandler sets the operation handler for the get project device operation
	ProjectGetProjectDeviceHandler project.GetProjectDeviceHandler
	// ProjectGetProjectDevicesHandler sets the operation handler for the get project devices operation
	ProjectGetProjectDevicesHandler project.GetProjectDevicesHandler
	// LogsGetProjectLogHandler sets the operation handler for the get project log operation
	LogsGetProjectLogHandler logs.GetProjectLogHandler
	// ProjectGetProjectSummaryHandler sets the operation handler for the get project summary operation
	ProjectGetProjectSummaryHandler project.GetProjectSummaryHandler
	// ProjectGetProjectsHandler sets the operation handler for the get projects operation
	ProjectGetProjectsHandler project.GetProjectsHandler
	// RulechainGetRuleChainHandler sets the operation handler for the get rule chain operation
	RulechainGetRuleChainHandler rulechain.GetRuleChainHandler
	// RulechainGetRuleChainMetadataHandler sets the operation handler for the get rule chain metadata operation
	RulechainGetRuleChainMetadataHandler rulechain.GetRuleChainMetadataHandler
	// RulechainGetRuleChainsHandler sets the operation handler for the get rule chains operation
	RulechainGetRuleChainsHandler rulechain.GetRuleChainsHandler
	// UserGetUserHandler sets the operation handler for the get user operation
	UserGetUserHandler user.GetUserHandler
	// UserLoginUserHandler sets the operation handler for the login user operation
	UserLoginUserHandler user.LoginUserHandler
	// UserLogoutUserHandler sets the operation handler for the logout user operation
	UserLogoutUserHandler user.LogoutUserHandler
	// RulechainSaveRuleChainHandler sets the operation handler for the save rule chain operation
	RulechainSaveRuleChainHandler rulechain.SaveRuleChainHandler
	// RulechainSaveRuleChainMetadataHandler sets the operation handler for the save rule chain metadata operation
	RulechainSaveRuleChainMetadataHandler rulechain.SaveRuleChainMetadataHandler
	// DeviceSendDataToDeviceHandler sets the operation handler for the send data to device operation
	DeviceSendDataToDeviceHandler device.SendDataToDeviceHandler
	// DeploymentSetDeploymentStatusHandler sets the operation handler for the set deployment status operation
	DeploymentSetDeploymentStatusHandler deployment.SetDeploymentStatusHandler
	// RulechainSetRootRuleChainHandler sets the operation handler for the set root rule chain operation
	RulechainSetRootRuleChainHandler rulechain.SetRootRuleChainHandler
	// DeploymentUpdateDeploymentHandler sets the operation handler for the update deployment operation
	DeploymentUpdateDeploymentHandler deployment.UpdateDeploymentHandler
	// ModelUpdateModelHandler sets the operation handler for the update model operation
	ModelUpdateModelHandler model.UpdateModelHandler
	// ProjectUpdateProjectHandler sets the operation handler for the update project operation
	ProjectUpdateProjectHandler project.UpdateProjectHandler
	// ProjectUpdateProjectDeviceHandler sets the operation handler for the update project device operation
	ProjectUpdateProjectDeviceHandler project.UpdateProjectDeviceHandler
	// ProjectUpdateProjectDeviceStatusHandler sets the operation handler for the update project device status operation
	ProjectUpdateProjectDeviceStatusHandler project.UpdateProjectDeviceStatusHandler
	// UserUpdateUserHandler sets the operation handler for the update user operation
	UserUpdateUserHandler user.UpdateUserHandler
	// RulechainUploadRuleChainHandler sets the operation handler for the upload rule chain operation
	RulechainUploadRuleChainHandler rulechain.UploadRuleChainHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *SwaggerPandasAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *SwaggerPandasAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *SwaggerPandasAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *SwaggerPandasAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *SwaggerPandasAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *SwaggerPandasAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *SwaggerPandasAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the SwaggerPandasAPI
func (o *SwaggerPandasAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.RoleAuthAuth == nil {
		unregistered = append(unregistered, "RoleAuthAuth")
	}

	if o.UserChangeCurrentUserPasswordHandler == nil {
		unregistered = append(unregistered, "user.ChangeCurrentUserPasswordHandler")
	}

	if o.UserChangeUserPasswordHandler == nil {
		unregistered = append(unregistered, "user.ChangeUserPasswordHandler")
	}

	if o.ProjectGetProjectsProjectIDHandler == nil {
		unregistered = append(unregistered, "project.GetProjectsProjectIDHandler")
	}

	if o.ProjectAddProjectDeviceHandler == nil {
		unregistered = append(unregistered, "project.AddProjectDeviceHandler")
	}

	if o.DeploymentCreateDeploymentHandler == nil {
		unregistered = append(unregistered, "deployment.CreateDeploymentHandler")
	}

	if o.ModelCreateModelHandler == nil {
		unregistered = append(unregistered, "model.CreateModelHandler")
	}

	if o.ProjectCreateProjectHandler == nil {
		unregistered = append(unregistered, "project.CreateProjectHandler")
	}

	if o.DeploymentDeleteDeploymentHandler == nil {
		unregistered = append(unregistered, "deployment.DeleteDeploymentHandler")
	}

	if o.ModelDeleteModelHandler == nil {
		unregistered = append(unregistered, "model.DeleteModelHandler")
	}

	if o.ProjectDeleteProjectHandler == nil {
		unregistered = append(unregistered, "project.DeleteProjectHandler")
	}

	if o.ProjectDeleteProjectDeviceHandler == nil {
		unregistered = append(unregistered, "project.DeleteProjectDeviceHandler")
	}

	if o.RulechainDeleteRuleChainHandler == nil {
		unregistered = append(unregistered, "rulechain.DeleteRuleChainHandler")
	}

	if o.UserDeleteUserHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserHandler")
	}

	if o.RulechainDownloadRuleChainHandler == nil {
		unregistered = append(unregistered, "rulechain.DownloadRuleChainHandler")
	}

	if o.DashboardGetDashboardHandler == nil {
		unregistered = append(unregistered, "dashboard.GetDashboardHandler")
	}

	if o.DeploymentGetDeploymentHandler == nil {
		unregistered = append(unregistered, "deployment.GetDeploymentHandler")
	}

	if o.DeploymentGetDeploymentsHandler == nil {
		unregistered = append(unregistered, "deployment.GetDeploymentsHandler")
	}

	if o.LogsGetDeviceLogHandler == nil {
		unregistered = append(unregistered, "logs.GetDeviceLogHandler")
	}

	if o.ModelGetModelHandler == nil {
		unregistered = append(unregistered, "model.GetModelHandler")
	}

	if o.ModelGetModelsHandler == nil {
		unregistered = append(unregistered, "model.GetModelsHandler")
	}

	if o.ProjectGetProjectDeviceHandler == nil {
		unregistered = append(unregistered, "project.GetProjectDeviceHandler")
	}

	if o.ProjectGetProjectDevicesHandler == nil {
		unregistered = append(unregistered, "project.GetProjectDevicesHandler")
	}

	if o.LogsGetProjectLogHandler == nil {
		unregistered = append(unregistered, "logs.GetProjectLogHandler")
	}

	if o.ProjectGetProjectSummaryHandler == nil {
		unregistered = append(unregistered, "project.GetProjectSummaryHandler")
	}

	if o.ProjectGetProjectsHandler == nil {
		unregistered = append(unregistered, "project.GetProjectsHandler")
	}

	if o.RulechainGetRuleChainHandler == nil {
		unregistered = append(unregistered, "rulechain.GetRuleChainHandler")
	}

	if o.RulechainGetRuleChainMetadataHandler == nil {
		unregistered = append(unregistered, "rulechain.GetRuleChainMetadataHandler")
	}

	if o.RulechainGetRuleChainsHandler == nil {
		unregistered = append(unregistered, "rulechain.GetRuleChainsHandler")
	}

	if o.UserGetUserHandler == nil {
		unregistered = append(unregistered, "user.GetUserHandler")
	}

	if o.UserLoginUserHandler == nil {
		unregistered = append(unregistered, "user.LoginUserHandler")
	}

	if o.UserLogoutUserHandler == nil {
		unregistered = append(unregistered, "user.LogoutUserHandler")
	}

	if o.RulechainSaveRuleChainHandler == nil {
		unregistered = append(unregistered, "rulechain.SaveRuleChainHandler")
	}

	if o.RulechainSaveRuleChainMetadataHandler == nil {
		unregistered = append(unregistered, "rulechain.SaveRuleChainMetadataHandler")
	}

	if o.DeviceSendDataToDeviceHandler == nil {
		unregistered = append(unregistered, "device.SendDataToDeviceHandler")
	}

	if o.DeploymentSetDeploymentStatusHandler == nil {
		unregistered = append(unregistered, "deployment.SetDeploymentStatusHandler")
	}

	if o.RulechainSetRootRuleChainHandler == nil {
		unregistered = append(unregistered, "rulechain.SetRootRuleChainHandler")
	}

	if o.DeploymentUpdateDeploymentHandler == nil {
		unregistered = append(unregistered, "deployment.UpdateDeploymentHandler")
	}

	if o.ModelUpdateModelHandler == nil {
		unregistered = append(unregistered, "model.UpdateModelHandler")
	}

	if o.ProjectUpdateProjectHandler == nil {
		unregistered = append(unregistered, "project.UpdateProjectHandler")
	}

	if o.ProjectUpdateProjectDeviceHandler == nil {
		unregistered = append(unregistered, "project.UpdateProjectDeviceHandler")
	}

	if o.ProjectUpdateProjectDeviceStatusHandler == nil {
		unregistered = append(unregistered, "project.UpdateProjectDeviceStatusHandler")
	}

	if o.UserUpdateUserHandler == nil {
		unregistered = append(unregistered, "user.UpdateUserHandler")
	}

	if o.RulechainUploadRuleChainHandler == nil {
		unregistered = append(unregistered, "rulechain.UploadRuleChainHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *SwaggerPandasAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *SwaggerPandasAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {

		case "roleAuth":

			result[name] = o.BearerAuthenticator(name, func(token string, scopes []string) (interface{}, error) {
				return o.RoleAuthAuth(token, scopes)
			})

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *SwaggerPandasAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *SwaggerPandasAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *SwaggerPandasAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *SwaggerPandasAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the swagger pandas API
func (o *SwaggerPandasAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *SwaggerPandasAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/users/password"] = user.NewChangeCurrentUserPassword(o.context, o.UserChangeCurrentUserPasswordHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/users/{userId}"] = user.NewChangeUserPassword(o.context, o.UserChangeUserPasswordHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{projectId}"] = project.NewGetProjectsProjectID(o.context, o.ProjectGetProjectsProjectIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects/{projectId}/devices"] = project.NewAddProjectDevice(o.context, o.ProjectAddProjectDeviceHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/deployments"] = deployment.NewCreateDeployment(o.context, o.DeploymentCreateDeploymentHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/models"] = model.NewCreateModel(o.context, o.ModelCreateModelHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/projects"] = project.NewCreateProject(o.context, o.ProjectCreateProjectHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/deployments/{deploymentId}"] = deployment.NewDeleteDeployment(o.context, o.DeploymentDeleteDeploymentHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/models/{modelId}"] = model.NewDeleteModel(o.context, o.ModelDeleteModelHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/projects/{projectId}"] = project.NewDeleteProject(o.context, o.ProjectDeleteProjectHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/project/{projectId}/devices/{deviceId}"] = project.NewDeleteProjectDevice(o.context, o.ProjectDeleteProjectDeviceHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/rulechains/{ruleChainId}"] = rulechain.NewDeleteRuleChain(o.context, o.RulechainDeleteRuleChainHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{userId}"] = user.NewDeleteUser(o.context, o.UserDeleteUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rulechains/{ruleChainId}/download"] = rulechain.NewDownloadRuleChain(o.context, o.RulechainDownloadRuleChainHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/dashboard"] = dashboard.NewGetDashboard(o.context, o.DashboardGetDashboardHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/deployments/{deploymentId}"] = deployment.NewGetDeployment(o.context, o.DeploymentGetDeploymentHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/deployments"] = deployment.NewGetDeployments(o.context, o.DeploymentGetDeploymentsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/logs/devices/{deviceId}"] = logs.NewGetDeviceLog(o.context, o.LogsGetDeviceLogHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/models/{modelId}"] = model.NewGetModel(o.context, o.ModelGetModelHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/models"] = model.NewGetModels(o.context, o.ModelGetModelsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/project/{projectId}/devices/{deviceId}"] = project.NewGetProjectDevice(o.context, o.ProjectGetProjectDeviceHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{projectId}/devices"] = project.NewGetProjectDevices(o.context, o.ProjectGetProjectDevicesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/logs/projects/{projectId}"] = logs.NewGetProjectLog(o.context, o.LogsGetProjectLogHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects/{projectId}/summary"] = project.NewGetProjectSummary(o.context, o.ProjectGetProjectSummaryHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/projects"] = project.NewGetProjects(o.context, o.ProjectGetProjectsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rulechains/{ruleChainId}"] = rulechain.NewGetRuleChain(o.context, o.RulechainGetRuleChainHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rulechains/{ruleChainId}/metadata"] = rulechain.NewGetRuleChainMetadata(o.context, o.RulechainGetRuleChainMetadataHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/rulechains"] = rulechain.NewGetRuleChains(o.context, o.RulechainGetRuleChainsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userId}"] = user.NewGetUser(o.context, o.UserGetUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users/login"] = user.NewLoginUser(o.context, o.UserLoginUserHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/logout"] = user.NewLogoutUser(o.context, o.UserLogoutUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rulechains/{ruleChainId}"] = rulechain.NewSaveRuleChain(o.context, o.RulechainSaveRuleChainHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rulechains/{ruleChainId}/metadata"] = rulechain.NewSaveRuleChainMetadata(o.context, o.RulechainSaveRuleChainMetadataHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/devices/{deviceId}"] = device.NewSendDataToDevice(o.context, o.DeviceSendDataToDeviceHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/deployments/{deploymentId}"] = deployment.NewSetDeploymentStatus(o.context, o.DeploymentSetDeploymentStatusHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rulechains/{ruleChainId}/root"] = rulechain.NewSetRootRuleChain(o.context, o.RulechainSetRootRuleChainHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/deployments/{deploymentId}"] = deployment.NewUpdateDeployment(o.context, o.DeploymentUpdateDeploymentHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/models"] = model.NewUpdateModel(o.context, o.ModelUpdateModelHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/projects/{projectId}"] = project.NewUpdateProject(o.context, o.ProjectUpdateProjectHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/project/{projectId}/devices/{deviceId}"] = project.NewUpdateProjectDevice(o.context, o.ProjectUpdateProjectDeviceHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/project/{projectId}/devices/{deviceId}"] = project.NewUpdateProjectDeviceStatus(o.context, o.ProjectUpdateProjectDeviceStatusHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{userId}"] = user.NewUpdateUser(o.context, o.UserUpdateUserHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/rulechains/{ruleChainId}/upload"] = rulechain.NewUploadRuleChain(o.context, o.RulechainUploadRuleChainHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *SwaggerPandasAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *SwaggerPandasAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *SwaggerPandasAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *SwaggerPandasAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
