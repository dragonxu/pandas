// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a pandas api server.",
    "title": "Swagger pandas",
    "contact": {
      "email": "jenson.zuo@qq.com"
    },
    "license": {
      "name": "Apache License"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "paths": {
    "/dashboard": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "dashboard information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Dashboard"
        ],
        "operationId": "getDashboard",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/Dashboard"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/deployments": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Deployment"
        ],
        "summary": "get all deployments",
        "operationId": "getDeployments",
        "parameters": [
          {
            "type": "integer",
            "description": "Number of persons returned",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page number",
            "name": "pageNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "query object for.You can get query key from rulechain object. This is a json string. For example:\n  * 模糊检索name,description,category\n  {\"name\": \"product\"}\n  {\"description\": \"abcd\"}\n  {\"category\": \"abcd\"}\n  * 多条件模糊检索(and)\n  {\"name\": \"product\", \"description\": \"abcd\"}\n  * (deprecated) 模糊检索created_at,updated_at\n  {\"created_at\": \"2018-10-11T09:13:26Z\"}\n  {\"updated_at\": \"2018-10-11T09:13:26Z\"}\n  * 精确检索user_id,id,template_id,key,secret,status,data_format\n  {\"user_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"template_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"key\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"secret\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"data_format\": \"JSON\"}\n  {\"data_format\": \"XML\"}\n",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models.json#/definitions/Deployment"
              },
              "properties": {
                "status": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Internal server rooro"
          },
          "default": {
            "description": "failed operation",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "create a new deployment",
        "tags": [
          "Deployment"
        ],
        "summary": "create a new deployment",
        "operationId": "createDeployment",
        "parameters": [
          {
            "description": "deployment information",
            "name": "deployment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/Deployment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully operation",
            "schema": {
              "$ref": "./models.json#/definitions/Deployment"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "405": {
            "description": "Invalid condition"
          }
        }
      }
    },
    "/deployments/{deploymentId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Deployment"
        ],
        "summary": "get specified deployment",
        "operationId": "getDeployment",
        "parameters": [
          {
            "type": "string",
            "description": "deployment identifier",
            "name": "deploymentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation",
            "schema": {
              "$ref": "./models.json#/definitions/Deployment"
            }
          },
          "404": {
            "description": "deployment not found"
          }
        }
      },
      "put": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Deployment"
        ],
        "summary": "update specified deployment",
        "operationId": "updateDeployment",
        "parameters": [
          {
            "type": "string",
            "description": "deployment identifier",
            "name": "deploymentId",
            "in": "path",
            "required": true
          },
          {
            "description": "updated deployment",
            "name": "deployment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/Deployment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation"
          },
          "404": {
            "description": "deployment not found"
          }
        }
      },
      "delete": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Deployment"
        ],
        "summary": "delete specified deployment",
        "operationId": "deleteDeployment",
        "parameters": [
          {
            "type": "string",
            "description": "deployment identifier",
            "name": "deploymentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation"
          },
          "404": {
            "description": "deployment not found"
          }
        }
      },
      "patch": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Deployment"
        ],
        "summary": "update specified deployment",
        "operationId": "setDeploymentStatus",
        "parameters": [
          {
            "type": "string",
            "description": "deployment identifier",
            "name": "deploymentId",
            "in": "path",
            "required": true
          },
          {
            "description": "start or stop deployment",
            "name": "deploymentControl",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/DeploymentControl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully operation"
          },
          "400": {
            "description": "Invalid deployment Id"
          },
          "404": {
            "description": "Deployment not found"
          },
          "405": {
            "description": "Deployment exception"
          }
        }
      }
    },
    "/devices/{deviceId}": {
      "post": {
        "description": "send data to device",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Device"
        ],
        "summary": "send data to device",
        "operationId": "sendDataToDevice",
        "parameters": [
          {
            "type": "string",
            "description": "device identifer",
            "name": "deviceId",
            "in": "path",
            "required": true
          },
          {
            "description": "data to device",
            "name": "deviceData",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/DeviceData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/logs/devices/{deviceId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get specified device's log",
        "tags": [
          "Logs"
        ],
        "operationId": "getDeviceLog",
        "parameters": [
          {
            "type": "string",
            "description": "deviceId",
            "name": "deviceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models.json#/definitions/DeviceLog"
              }
            }
          },
          "404": {
            "description": "device not found."
          }
        }
      }
    },
    "/logs/projects/{projectId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get specified project's log",
        "tags": [
          "Logs"
        ],
        "operationId": "getProjectLog",
        "parameters": [
          {
            "type": "string",
            "description": "project id",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models.json#/definitions/DeviceLog"
              }
            }
          },
          "404": {
            "description": "device not found"
          }
        }
      }
    },
    "/models": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get specified all models",
        "tags": [
          "Model"
        ],
        "operationId": "getModels",
        "parameters": [
          {
            "type": "integer",
            "description": "Number of persons returned",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page number",
            "name": "pageNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "query object for.You can get query key from rulechain object. This is a json string. For example:\n  * 模糊检索name,description,category\n  {\"name\": \"product\"}\n  {\"description\": \"abcd\"}\n  {\"category\": \"abcd\"}\n  * 多条件模糊检索(and)\n  {\"name\": \"product\", \"description\": \"abcd\"}\n  * (deprecated) 模糊检索created_at,updated_at\n  {\"created_at\": \"2018-10-11T09:13:26Z\"}\n  {\"updated_at\": \"2018-10-11T09:13:26Z\"}\n  * 精确检索user_id,id,template_id,key,secret,status,data_format\n  {\"user_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"template_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"key\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"secret\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"data_format\": \"JSON\"}\n  {\"data_format\": \"XML\"}\n",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models.json#/definitions/DeviceModel"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "put": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "update device's model",
        "tags": [
          "Model"
        ],
        "operationId": "updateModel",
        "parameters": [
          {
            "name": "deviceModel",
            "in": "body",
            "schema": {
              "$ref": "./models.json#/definitions/DeviceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "device not found"
          },
          "500": {
            "description": "server internal error"
          }
        }
      },
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "create device's model",
        "tags": [
          "Model"
        ],
        "operationId": "createModel",
        "parameters": [
          {
            "name": "deviceModel",
            "in": "body",
            "schema": {
              "$ref": "./models.json#/definitions/DeviceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "device not found"
          },
          "500": {
            "description": "server internal error"
          }
        }
      }
    },
    "/models/{modelId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get specified model",
        "tags": [
          "Model"
        ],
        "operationId": "getModel",
        "parameters": [
          {
            "type": "string",
            "description": "device model id",
            "name": "modelId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation",
            "schema": {
              "$ref": "./models.json#/definitions/DeviceModel"
            }
          },
          "404": {
            "description": "model not found"
          }
        }
      },
      "delete": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "delete device's model",
        "tags": [
          "Model"
        ],
        "operationId": "deleteModel",
        "parameters": [
          {
            "type": "string",
            "description": "device model identifier",
            "name": "modelId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "model not found"
          },
          "500": {
            "description": "server internal error"
          }
        }
      }
    },
    "/project/{projectId}/devices/{deviceId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get project's specified device",
        "tags": [
          "Project"
        ],
        "summary": "geet project's specified device",
        "operationId": "getProjectDevice",
        "parameters": [
          {
            "type": "string",
            "description": "projectId",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "deviceId",
            "name": "deviceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/Device"
            }
          },
          "404": {
            "description": "project or device not found"
          }
        }
      },
      "put": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "update project's specified device",
        "tags": [
          "Project"
        ],
        "summary": "update project's specified device",
        "operationId": "updateProjectDevice",
        "parameters": [
          {
            "type": "string",
            "description": "project id",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "device id",
            "name": "deviceId",
            "in": "path",
            "required": true
          },
          {
            "name": "device",
            "in": "body",
            "schema": {
              "$ref": "./models.json#/definitions/Device"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "server internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "delete project's specified device",
        "tags": [
          "Project"
        ],
        "summary": "delete project's specified device",
        "operationId": "deleteProjectDevice",
        "parameters": [
          {
            "type": "string",
            "description": "projectId",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "deviceId",
            "name": "deviceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "server internal error"
          }
        }
      },
      "patch": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Project"
        ],
        "summary": "update project's specified device's status",
        "operationId": "updateProjectDeviceStatus",
        "parameters": [
          {
            "type": "string",
            "description": "project id",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "device id",
            "name": "deviceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "update device's field",
            "name": "field",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "server internal error"
          }
        }
      }
    },
    "/projects": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Project"
        ],
        "summary": "retrieve all projects",
        "operationId": "getProjects",
        "parameters": [
          {
            "type": "integer",
            "description": "Number of persons returned",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page number",
            "name": "pageNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "query object for.You can get query key from rulechain object. This is a json string. For example:\n  * 模糊检索name,description,category\n  {\"name\": \"product\"}\n  {\"description\": \"abcd\"}\n  {\"category\": \"abcd\"}\n  * 多条件模糊检索(and)\n  {\"name\": \"product\", \"description\": \"abcd\"}\n  * (deprecated) 模糊检索created_at,updated_at\n  {\"created_at\": \"2018-10-11T09:13:26Z\"}\n  {\"updated_at\": \"2018-10-11T09:13:26Z\"}\n  * 精确检索user_id,id,template_id,key,secret,status,data_format\n  {\"user_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"template_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"key\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"secret\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"data_format\": \"JSON\"}\n  {\"data_format\": \"XML\"}\n",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models.json#/definitions/Project"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "post": {
        "description": "create new project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Project"
        ],
        "operationId": "createProject",
        "parameters": [
          {
            "description": "new created project",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/Project"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/projects/{projectId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Project"
        ],
        "summary": "get specified project",
        "parameters": [
          {
            "type": "string",
            "description": "project id",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/Project"
            }
          },
          "404": {
            "description": "Bad request"
          }
        }
      },
      "put": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Project"
        ],
        "summary": "update specified project",
        "operationId": "updateProject",
        "parameters": [
          {
            "type": "string",
            "description": "project identifier",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "description": "updated project",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation"
          },
          "404": {
            "description": "project not found"
          },
          "500": {
            "description": "server internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "delete specifed project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Project"
        ],
        "summary": "delete project",
        "operationId": "deleteProject",
        "parameters": [
          {
            "type": "string",
            "description": "project id",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "project not found"
          },
          "500": {
            "description": "server internal error"
          }
        }
      }
    },
    "/projects/{projectId}/devices": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get project's devices",
        "tags": [
          "Project"
        ],
        "summary": "get project's all devices",
        "operationId": "getProjectDevices",
        "parameters": [
          {
            "type": "string",
            "description": "projectId",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models.json#/definitions/Device"
              }
            }
          },
          "404": {
            "description": "project not found"
          }
        }
      },
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "add device instance to project",
        "tags": [
          "Project"
        ],
        "summary": "add device instance to project",
        "operationId": "addProjectDevice",
        "parameters": [
          {
            "type": "string",
            "description": "specified project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "name": "device",
            "in": "body",
            "schema": {
              "$ref": "./models.json#/definitions/Device"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "project not found"
          },
          "500": {
            "description": "server internal error"
          }
        }
      }
    },
    "/projects/{projectId}/summary": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get project's summary",
        "tags": [
          "Project"
        ],
        "summary": "get project's summary",
        "operationId": "getProjectSummary",
        "parameters": [
          {
            "type": "string",
            "description": "projectId",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "./models.json#/definitions/ProjectSummary"
            }
          },
          "404": {
            "description": "project not found"
          }
        }
      }
    },
    "/rulechains": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get all of rule chains",
        "tags": [
          "Rulechain"
        ],
        "summary": "get all of rule chains",
        "operationId": "getRuleChains",
        "parameters": [
          {
            "type": "integer",
            "description": "Number of persons returned",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page number",
            "name": "pageNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "query object for.You can get query key from rulechain object. This is a json string. For example:\n  * 模糊检索name,description,category\n  {\"name\": \"product\"}\n  {\"description\": \"abcd\"}\n  {\"category\": \"abcd\"}\n  * 多条件模糊检索(and)\n  {\"name\": \"product\", \"description\": \"abcd\"}\n  * (deprecated) 模糊检索created_at,updated_at\n  {\"created_at\": \"2018-10-11T09:13:26Z\"}\n  {\"updated_at\": \"2018-10-11T09:13:26Z\"}\n  * 精确检索user_id,id,template_id,key,secret,status,data_format\n  {\"user_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"template_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"key\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"secret\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"data_format\": \"JSON\"}\n  {\"data_format\": \"XML\"}\n",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models.json#/definitions/RuleChain"
              },
              "properties": {
                "status": {
                  "description": "the result of excution",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/rulechains/{ruleChainId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get  rule chain by id",
        "tags": [
          "Rulechain"
        ],
        "summary": "get rule chain by id",
        "operationId": "getRuleChain",
        "parameters": [
          {
            "type": "string",
            "description": "rule chain id",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation",
            "schema": {
              "$ref": "./models.json#/definitions/RuleChain"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "rule chain not found"
          }
        }
      },
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "save one rule chain",
        "tags": [
          "Rulechain"
        ],
        "summary": "save one rule chain",
        "operationId": "saveRuleChain",
        "parameters": [
          {
            "type": "string",
            "description": "rule chain",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          },
          {
            "description": "updated rule chain",
            "name": "ruleChain",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "./models.json#/definitions/RuleChain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully operation"
          },
          "404": {
            "description": "Rule chain not found"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "delete rule chain with Id",
        "tags": [
          "Rulechain"
        ],
        "summary": "delete rule chain",
        "operationId": "deleteRuleChain",
        "parameters": [
          {
            "type": "string",
            "description": "rule chain id",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "rule chain not found"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/rulechains/{ruleChainId}/download": {
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "download all infomation of one rule chain to the local pc",
        "tags": [
          "Rulechain"
        ],
        "summary": "download all infomation of one rule chain to the local pc",
        "operationId": "downloadRuleChain",
        "parameters": [
          {
            "type": "string",
            "description": "download rule chain id",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "excute successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "the result of excution",
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/rulechains/{ruleChainId}/metadata": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get meta data of perticular rule chain",
        "tags": [
          "Rulechain"
        ],
        "summary": "get meta data of perticular rule chain",
        "operationId": "getRuleChainMetadata",
        "parameters": [
          {
            "type": "string",
            "description": "rule chain id",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "execute successfully",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "rule chain metadata not found"
          }
        }
      },
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "save meta data",
        "tags": [
          "Rulechain"
        ],
        "summary": "save meta data",
        "operationId": "saveRuleChainMetadata",
        "parameters": [
          {
            "type": "string",
            "description": "rule chain identifier",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          },
          {
            "description": "meta data",
            "name": "metadata",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "excute successfully"
          },
          "400": {
            "description": "Invalid metadata"
          },
          "404": {
            "description": "rule chain not found"
          }
        }
      }
    },
    "/rulechains/{ruleChainId}/root": {
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "set root id",
        "tags": [
          "Rulechain"
        ],
        "summary": "set root id",
        "operationId": "setRootRuleChain",
        "parameters": [
          {
            "type": "string",
            "description": "rule chain id",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "set successfully"
          },
          "404": {
            "description": "rule chain not found"
          },
          "500": {
            "description": "server internal error"
          }
        }
      }
    },
    "/rulechains/{ruleChainId}/upload": {
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "upload all infomation of one rule chain to the system",
        "tags": [
          "Rulechain"
        ],
        "summary": "upload all infomation of one rule chain to the system",
        "operationId": "uploadRuleChain",
        "parameters": [
          {
            "type": "string",
            "description": "rule chain identifier",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "upload address",
            "name": "path",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "excute successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "./models.json#/definitions/RuleChain"
              },
              "properties": {
                "status": {
                  "description": "the result of excution",
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "security": [],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "User"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "type": "string",
            "name": "grant_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The user name for login",
            "name": "username",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The password for login in clear text",
            "name": "password",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoginToken"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/users/logout": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "admin",
              "user"
            ]
          }
        ],
        "tags": [
          "User"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/password": {
      "patch": {
        "description": "This can only be done by the logged in user.",
        "tags": [
          "User"
        ],
        "summary": "change current user's password",
        "operationId": "ChangeCurrentUserPassword",
        "parameters": [
          {
            "description": "Updated user password",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "new_passowrd": {
                  "type": "string"
                },
                "old_password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "admin",
              "user"
            ]
          }
        ],
        "description": "This can only be done by the logged in user.",
        "tags": [
          "User"
        ],
        "summary": "Get user by user id",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be fetched.",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "tags": [
          "User"
        ],
        "summary": "Updated user by id",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "description": "name that need to be updated",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated user object",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "admin",
                      "user"
                    ]
                  }
                },
                "username": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "security": [
          {
            "roleAuth": [
              "admin"
            ]
          }
        ],
        "description": "This can only be done by the logged in user.",
        "tags": [
          "User"
        ],
        "summary": "Delete user by id",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "The user that needs to be deleted",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "patch": {
        "security": [
          {
            "roleAuth": [
              "admin"
            ]
          }
        ],
        "description": "This can only be done by the logged in user.",
        "tags": [
          "User"
        ],
        "summary": "change user's password",
        "operationId": "ChangeUserPassword",
        "parameters": [
          {
            "type": "string",
            "description": "name that need to be updated",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated user password",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "LoginToken": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        }
      }
    },
    "SignupUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "admin",
              "user"
            ]
          }
        },
        "username": {
          "type": "string"
        }
      }
    },
    "Timedef": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "dateTime",
          "readOnly": true
        },
        "updated": {
          "type": "string",
          "format": "dateTime",
          "readOnly": true
        }
      },
      "example": {
        "created": "2018-09-20T11:05:54Z",
        "updated": "2018-09-20T11:05:54Z"
      }
    },
    "User": {
      "allOf": [
        {
          "$ref": "#/definitions/Timedef"
        },
        {
          "properties": {
            "email": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "roles": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "admin",
                  "user"
                ]
              }
            },
            "status": {
              "type": "string",
              "enum": [
                "OFFLINE",
                "ONLINE"
              ]
            },
            "username": {
              "type": "string"
            }
          },
          "example": {
            "balance": "0",
            "email": "admin@cloudstone.com",
            "id": "behnu4h42p0bs8a5qukg",
            "phone": "123456789",
            "productNum": "0",
            "roles": [
              "admin",
              "user"
            ],
            "status": "OFFLINE",
            "totalFund": "0",
            "username": "admin"
          }
        }
      ]
    },
    "UserLoginRecord": {
      "type": "object",
      "required": [
        "number"
      ],
      "properties": {
        "date": {
          "type": "string",
          "format": "dateTime"
        },
        "number": {
          "type": "integer"
        }
      }
    },
    "UserOverview": {
      "type": "object",
      "required": [
        "totalNum",
        "onlineNum",
        "todayLoginNum",
        "dayAveLoginNum"
      ],
      "properties": {
        "dayAveLoginNum": {
          "type": "integer"
        },
        "onlineNum": {
          "type": "integer"
        },
        "todayLoginNum": {
          "type": "integer"
        },
        "totalNum": {
          "type": "integer"
        }
      }
    }
  },
  "securityDefinitions": {
    "roleAuth": {
      "type": "oauth2",
      "flow": "password",
      "tokenUrl": "localhost:8080/v1/users/login",
      "scopes": {
        "admin": "scope of registere admin",
        "user": "scope of registered user"
      }
    }
  },
  "security": [
    {
      "roleAuth": [
        "user"
      ]
    }
  ],
  "tags": [
    {
      "description": "Operations about user",
      "name": "User"
    },
    {
      "description": "operation about dashboard",
      "name": "Dashboard"
    },
    {
      "description": "Operations about projects",
      "name": "Project"
    },
    {
      "description": "Operation about devices",
      "name": "Device"
    },
    {
      "description": "Operation about model",
      "name": "Model"
    },
    {
      "description": "Operation about log",
      "name": "Logs"
    },
    {
      "description": "operation about rule chain",
      "name": "Rulechain"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a pandas api server.",
    "title": "Swagger pandas",
    "contact": {
      "email": "jenson.zuo@qq.com"
    },
    "license": {
      "name": "Apache License"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "paths": {
    "/dashboard": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "dashboard information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Dashboard"
        ],
        "operationId": "getDashboard",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/dashboard"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/deployments": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Deployment"
        ],
        "summary": "get all deployments",
        "operationId": "getDeployments",
        "parameters": [
          {
            "type": "integer",
            "description": "Number of persons returned",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page number",
            "name": "pageNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "query object for.You can get query key from rulechain object. This is a json string. For example:\n  * 模糊检索name,description,category\n  {\"name\": \"product\"}\n  {\"description\": \"abcd\"}\n  {\"category\": \"abcd\"}\n  * 多条件模糊检索(and)\n  {\"name\": \"product\", \"description\": \"abcd\"}\n  * (deprecated) 模糊检索created_at,updated_at\n  {\"created_at\": \"2018-10-11T09:13:26Z\"}\n  {\"updated_at\": \"2018-10-11T09:13:26Z\"}\n  * 精确检索user_id,id,template_id,key,secret,status,data_format\n  {\"user_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"template_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"key\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"secret\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"data_format\": \"JSON\"}\n  {\"data_format\": \"XML\"}\n",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/deployment"
              },
              "properties": {
                "status": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Internal server rooro"
          },
          "default": {
            "description": "failed operation",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "create a new deployment",
        "tags": [
          "Deployment"
        ],
        "summary": "create a new deployment",
        "operationId": "createDeployment",
        "parameters": [
          {
            "description": "deployment information",
            "name": "deployment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "405": {
            "description": "Invalid condition"
          }
        }
      }
    },
    "/deployments/{deploymentId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Deployment"
        ],
        "summary": "get specified deployment",
        "operationId": "getDeployment",
        "parameters": [
          {
            "type": "string",
            "description": "deployment identifier",
            "name": "deploymentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          },
          "404": {
            "description": "deployment not found"
          }
        }
      },
      "put": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Deployment"
        ],
        "summary": "update specified deployment",
        "operationId": "updateDeployment",
        "parameters": [
          {
            "type": "string",
            "description": "deployment identifier",
            "name": "deploymentId",
            "in": "path",
            "required": true
          },
          {
            "description": "updated deployment",
            "name": "deployment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation"
          },
          "404": {
            "description": "deployment not found"
          }
        }
      },
      "delete": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Deployment"
        ],
        "summary": "delete specified deployment",
        "operationId": "deleteDeployment",
        "parameters": [
          {
            "type": "string",
            "description": "deployment identifier",
            "name": "deploymentId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation"
          },
          "404": {
            "description": "deployment not found"
          }
        }
      },
      "patch": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Deployment"
        ],
        "summary": "update specified deployment",
        "operationId": "setDeploymentStatus",
        "parameters": [
          {
            "type": "string",
            "description": "deployment identifier",
            "name": "deploymentId",
            "in": "path",
            "required": true
          },
          {
            "description": "start or stop deployment",
            "name": "deploymentControl",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deploymentControl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully operation"
          },
          "400": {
            "description": "Invalid deployment Id"
          },
          "404": {
            "description": "Deployment not found"
          },
          "405": {
            "description": "Deployment exception"
          }
        }
      }
    },
    "/devices/{deviceId}": {
      "post": {
        "description": "send data to device",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Device"
        ],
        "summary": "send data to device",
        "operationId": "sendDataToDevice",
        "parameters": [
          {
            "type": "string",
            "description": "device identifer",
            "name": "deviceId",
            "in": "path",
            "required": true
          },
          {
            "description": "data to device",
            "name": "deviceData",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deviceData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/logs/devices/{deviceId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get specified device's log",
        "tags": [
          "Logs"
        ],
        "operationId": "getDeviceLog",
        "parameters": [
          {
            "type": "string",
            "description": "deviceId",
            "name": "deviceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/deviceLog"
              }
            }
          },
          "404": {
            "description": "device not found."
          }
        }
      }
    },
    "/logs/projects/{projectId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get specified project's log",
        "tags": [
          "Logs"
        ],
        "operationId": "getProjectLog",
        "parameters": [
          {
            "type": "string",
            "description": "project id",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/deviceLog"
              }
            }
          },
          "404": {
            "description": "device not found"
          }
        }
      }
    },
    "/models": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get specified all models",
        "tags": [
          "Model"
        ],
        "operationId": "getModels",
        "parameters": [
          {
            "type": "integer",
            "description": "Number of persons returned",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page number",
            "name": "pageNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "query object for.You can get query key from rulechain object. This is a json string. For example:\n  * 模糊检索name,description,category\n  {\"name\": \"product\"}\n  {\"description\": \"abcd\"}\n  {\"category\": \"abcd\"}\n  * 多条件模糊检索(and)\n  {\"name\": \"product\", \"description\": \"abcd\"}\n  * (deprecated) 模糊检索created_at,updated_at\n  {\"created_at\": \"2018-10-11T09:13:26Z\"}\n  {\"updated_at\": \"2018-10-11T09:13:26Z\"}\n  * 精确检索user_id,id,template_id,key,secret,status,data_format\n  {\"user_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"template_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"key\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"secret\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"data_format\": \"JSON\"}\n  {\"data_format\": \"XML\"}\n",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/deviceModel"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "put": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "update device's model",
        "tags": [
          "Model"
        ],
        "operationId": "updateModel",
        "parameters": [
          {
            "name": "deviceModel",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/deviceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "device not found"
          },
          "500": {
            "description": "server internal error"
          }
        }
      },
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "create device's model",
        "tags": [
          "Model"
        ],
        "operationId": "createModel",
        "parameters": [
          {
            "name": "deviceModel",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/deviceModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "device not found"
          },
          "500": {
            "description": "server internal error"
          }
        }
      }
    },
    "/models/{modelId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get specified model",
        "tags": [
          "Model"
        ],
        "operationId": "getModel",
        "parameters": [
          {
            "type": "string",
            "description": "device model id",
            "name": "modelId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation",
            "schema": {
              "$ref": "#/definitions/deviceModel"
            }
          },
          "404": {
            "description": "model not found"
          }
        }
      },
      "delete": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "delete device's model",
        "tags": [
          "Model"
        ],
        "operationId": "deleteModel",
        "parameters": [
          {
            "type": "string",
            "description": "device model identifier",
            "name": "modelId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "model not found"
          },
          "500": {
            "description": "server internal error"
          }
        }
      }
    },
    "/project/{projectId}/devices/{deviceId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get project's specified device",
        "tags": [
          "Project"
        ],
        "summary": "geet project's specified device",
        "operationId": "getProjectDevice",
        "parameters": [
          {
            "type": "string",
            "description": "projectId",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "deviceId",
            "name": "deviceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/device"
            }
          },
          "404": {
            "description": "project or device not found"
          }
        }
      },
      "put": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "update project's specified device",
        "tags": [
          "Project"
        ],
        "summary": "update project's specified device",
        "operationId": "updateProjectDevice",
        "parameters": [
          {
            "type": "string",
            "description": "project id",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "device id",
            "name": "deviceId",
            "in": "path",
            "required": true
          },
          {
            "name": "device",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/device"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "server internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "delete project's specified device",
        "tags": [
          "Project"
        ],
        "summary": "delete project's specified device",
        "operationId": "deleteProjectDevice",
        "parameters": [
          {
            "type": "string",
            "description": "projectId",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "deviceId",
            "name": "deviceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "server internal error"
          }
        }
      },
      "patch": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Project"
        ],
        "summary": "update project's specified device's status",
        "operationId": "updateProjectDeviceStatus",
        "parameters": [
          {
            "type": "string",
            "description": "project id",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "device id",
            "name": "deviceId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "update device's field",
            "name": "field",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "server internal error"
          }
        }
      }
    },
    "/projects": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Project"
        ],
        "summary": "retrieve all projects",
        "operationId": "getProjects",
        "parameters": [
          {
            "type": "integer",
            "description": "Number of persons returned",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page number",
            "name": "pageNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "query object for.You can get query key from rulechain object. This is a json string. For example:\n  * 模糊检索name,description,category\n  {\"name\": \"product\"}\n  {\"description\": \"abcd\"}\n  {\"category\": \"abcd\"}\n  * 多条件模糊检索(and)\n  {\"name\": \"product\", \"description\": \"abcd\"}\n  * (deprecated) 模糊检索created_at,updated_at\n  {\"created_at\": \"2018-10-11T09:13:26Z\"}\n  {\"updated_at\": \"2018-10-11T09:13:26Z\"}\n  * 精确检索user_id,id,template_id,key,secret,status,data_format\n  {\"user_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"template_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"key\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"secret\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"data_format\": \"JSON\"}\n  {\"data_format\": \"XML\"}\n",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/project"
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal error"
          }
        }
      },
      "post": {
        "description": "create new project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Project"
        ],
        "operationId": "createProject",
        "parameters": [
          {
            "description": "new created project",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/project"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/projects/{projectId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Project"
        ],
        "summary": "get specified project",
        "parameters": [
          {
            "type": "string",
            "description": "project id",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/project"
            }
          },
          "404": {
            "description": "Bad request"
          }
        }
      },
      "put": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "tags": [
          "Project"
        ],
        "summary": "update specified project",
        "operationId": "updateProject",
        "parameters": [
          {
            "type": "string",
            "description": "project identifier",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "description": "updated project",
            "name": "project",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation"
          },
          "404": {
            "description": "project not found"
          },
          "500": {
            "description": "server internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "delete specifed project",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Project"
        ],
        "summary": "delete project",
        "operationId": "deleteProject",
        "parameters": [
          {
            "type": "string",
            "description": "project id",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "project not found"
          },
          "500": {
            "description": "server internal error"
          }
        }
      }
    },
    "/projects/{projectId}/devices": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get project's devices",
        "tags": [
          "Project"
        ],
        "summary": "get project's all devices",
        "operationId": "getProjectDevices",
        "parameters": [
          {
            "type": "string",
            "description": "projectId",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/device"
              }
            }
          },
          "404": {
            "description": "project not found"
          }
        }
      },
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "add device instance to project",
        "tags": [
          "Project"
        ],
        "summary": "add device instance to project",
        "operationId": "addProjectDevice",
        "parameters": [
          {
            "type": "string",
            "description": "specified project",
            "name": "projectId",
            "in": "path",
            "required": true
          },
          {
            "name": "device",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/device"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "project not found"
          },
          "500": {
            "description": "server internal error"
          }
        }
      }
    },
    "/projects/{projectId}/summary": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get project's summary",
        "tags": [
          "Project"
        ],
        "summary": "get project's summary",
        "operationId": "getProjectSummary",
        "parameters": [
          {
            "type": "string",
            "description": "projectId",
            "name": "projectId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/projectSummary"
            }
          },
          "404": {
            "description": "project not found"
          }
        }
      }
    },
    "/rulechains": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get all of rule chains",
        "tags": [
          "Rulechain"
        ],
        "summary": "get all of rule chains",
        "operationId": "getRuleChains",
        "parameters": [
          {
            "type": "integer",
            "description": "Number of persons returned",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page number",
            "name": "pageNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "query object for.You can get query key from rulechain object. This is a json string. For example:\n  * 模糊检索name,description,category\n  {\"name\": \"product\"}\n  {\"description\": \"abcd\"}\n  {\"category\": \"abcd\"}\n  * 多条件模糊检索(and)\n  {\"name\": \"product\", \"description\": \"abcd\"}\n  * (deprecated) 模糊检索created_at,updated_at\n  {\"created_at\": \"2018-10-11T09:13:26Z\"}\n  {\"updated_at\": \"2018-10-11T09:13:26Z\"}\n  * 精确检索user_id,id,template_id,key,secret,status,data_format\n  {\"user_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"template_id\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"key\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"secret\": \"bevh8dkvr53g2n6u9l70\"}\n  {\"data_format\": \"JSON\"}\n  {\"data_format\": \"XML\"}\n",
            "name": "q",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ruleChain"
              },
              "properties": {
                "status": {
                  "description": "the result of excution",
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/rulechains/{ruleChainId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get  rule chain by id",
        "tags": [
          "Rulechain"
        ],
        "summary": "get rule chain by id",
        "operationId": "getRuleChain",
        "parameters": [
          {
            "type": "string",
            "description": "rule chain id",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully operation",
            "schema": {
              "$ref": "#/definitions/ruleChain"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "rule chain not found"
          }
        }
      },
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "save one rule chain",
        "tags": [
          "Rulechain"
        ],
        "summary": "save one rule chain",
        "operationId": "saveRuleChain",
        "parameters": [
          {
            "type": "string",
            "description": "rule chain",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          },
          {
            "description": "updated rule chain",
            "name": "ruleChain",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ruleChain"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully operation"
          },
          "404": {
            "description": "Rule chain not found"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      },
      "delete": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "delete rule chain with Id",
        "tags": [
          "Rulechain"
        ],
        "summary": "delete rule chain",
        "operationId": "deleteRuleChain",
        "parameters": [
          {
            "type": "string",
            "description": "rule chain id",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Delete successfully"
          },
          "404": {
            "description": "rule chain not found"
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/rulechains/{ruleChainId}/download": {
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "download all infomation of one rule chain to the local pc",
        "tags": [
          "Rulechain"
        ],
        "summary": "download all infomation of one rule chain to the local pc",
        "operationId": "downloadRuleChain",
        "parameters": [
          {
            "type": "string",
            "description": "download rule chain id",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "excute successfully",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "description": "the result of excution",
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/rulechains/{ruleChainId}/metadata": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "get meta data of perticular rule chain",
        "tags": [
          "Rulechain"
        ],
        "summary": "get meta data of perticular rule chain",
        "operationId": "getRuleChainMetadata",
        "parameters": [
          {
            "type": "string",
            "description": "rule chain id",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "execute successfully",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "rule chain metadata not found"
          }
        }
      },
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "save meta data",
        "tags": [
          "Rulechain"
        ],
        "summary": "save meta data",
        "operationId": "saveRuleChainMetadata",
        "parameters": [
          {
            "type": "string",
            "description": "rule chain identifier",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          },
          {
            "description": "meta data",
            "name": "metadata",
            "in": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "excute successfully"
          },
          "400": {
            "description": "Invalid metadata"
          },
          "404": {
            "description": "rule chain not found"
          }
        }
      }
    },
    "/rulechains/{ruleChainId}/root": {
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "set root id",
        "tags": [
          "Rulechain"
        ],
        "summary": "set root id",
        "operationId": "setRootRuleChain",
        "parameters": [
          {
            "type": "string",
            "description": "rule chain id",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "set successfully"
          },
          "404": {
            "description": "rule chain not found"
          },
          "500": {
            "description": "server internal error"
          }
        }
      }
    },
    "/rulechains/{ruleChainId}/upload": {
      "post": {
        "security": [
          {
            "roleAuth": [
              "user"
            ]
          }
        ],
        "description": "upload all infomation of one rule chain to the system",
        "tags": [
          "Rulechain"
        ],
        "summary": "upload all infomation of one rule chain to the system",
        "operationId": "uploadRuleChain",
        "parameters": [
          {
            "type": "string",
            "description": "rule chain identifier",
            "name": "ruleChainId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "upload address",
            "name": "path",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "excute successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ruleChain"
              },
              "properties": {
                "status": {
                  "description": "the result of excution",
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Server internal error"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "security": [],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "User"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "type": "string",
            "name": "grant_type",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The user name for login",
            "name": "username",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The password for login in clear text",
            "name": "password",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoginToken"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/users/logout": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "admin",
              "user"
            ]
          }
        ],
        "tags": [
          "User"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/password": {
      "patch": {
        "description": "This can only be done by the logged in user.",
        "tags": [
          "User"
        ],
        "summary": "change current user's password",
        "operationId": "ChangeCurrentUserPassword",
        "parameters": [
          {
            "description": "Updated user password",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "new_passowrd": {
                  "type": "string"
                },
                "old_password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "security": [
          {
            "roleAuth": [
              "admin",
              "user"
            ]
          }
        ],
        "description": "This can only be done by the logged in user.",
        "tags": [
          "User"
        ],
        "summary": "Get user by user id",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be fetched.",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "tags": [
          "User"
        ],
        "summary": "Updated user by id",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "description": "name that need to be updated",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated user object",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "admin",
                      "user"
                    ]
                  }
                },
                "username": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "security": [
          {
            "roleAuth": [
              "admin"
            ]
          }
        ],
        "description": "This can only be done by the logged in user.",
        "tags": [
          "User"
        ],
        "summary": "Delete user by id",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "The user that needs to be deleted",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "patch": {
        "security": [
          {
            "roleAuth": [
              "admin"
            ]
          }
        ],
        "description": "This can only be done by the logged in user.",
        "tags": [
          "User"
        ],
        "summary": "change user's password",
        "operationId": "ChangeUserPassword",
        "parameters": [
          {
            "type": "string",
            "description": "name that need to be updated",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated user password",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "LoginToken": {
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        }
      }
    },
    "SignupUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "admin",
              "user"
            ]
          }
        },
        "username": {
          "type": "string"
        }
      }
    },
    "Timedef": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "dateTime",
          "readOnly": true
        },
        "updated": {
          "type": "string",
          "format": "dateTime",
          "readOnly": true
        }
      },
      "example": {
        "created": "2018-09-20T11:05:54Z",
        "updated": "2018-09-20T11:05:54Z"
      }
    },
    "User": {
      "allOf": [
        {
          "$ref": "#/definitions/Timedef"
        },
        {
          "properties": {
            "email": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "roles": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "admin",
                  "user"
                ]
              }
            },
            "status": {
              "type": "string",
              "enum": [
                "OFFLINE",
                "ONLINE"
              ]
            },
            "username": {
              "type": "string"
            }
          },
          "example": {
            "balance": "0",
            "email": "admin@cloudstone.com",
            "id": "behnu4h42p0bs8a5qukg",
            "phone": "123456789",
            "productNum": "0",
            "roles": [
              "admin",
              "user"
            ],
            "status": "OFFLINE",
            "totalFund": "0",
            "username": "admin"
          }
        }
      ]
    },
    "UserLoginRecord": {
      "type": "object",
      "required": [
        "number"
      ],
      "properties": {
        "date": {
          "type": "string",
          "format": "dateTime"
        },
        "number": {
          "type": "integer"
        }
      }
    },
    "UserOverview": {
      "type": "object",
      "required": [
        "totalNum",
        "onlineNum",
        "todayLoginNum",
        "dayAveLoginNum"
      ],
      "properties": {
        "dayAveLoginNum": {
          "type": "integer"
        },
        "onlineNum": {
          "type": "integer"
        },
        "todayLoginNum": {
          "type": "integer"
        },
        "totalNum": {
          "type": "integer"
        }
      }
    },
    "dashboard": {
      "description": "Dashboard Dashboard",
      "type": "object",
      "properties": {
        "deviceActiveNumber": {
          "type": "string",
          "x-go-name": "DeviceActiveNumber"
        },
        "deviceModelActiveNumber": {
          "type": "string",
          "x-go-name": "DeviceModelActiveNumber"
        },
        "deviceNumber": {
          "type": "string",
          "x-go-name": "DeviceNumber"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "modelNumber": {
          "type": "string",
          "x-go-name": "DeviceModelNumber"
        },
        "projectActivieNumber": {
          "type": "string",
          "x-go-name": "ProjectActiveNumber"
        },
        "projectNumber": {
          "type": "string",
          "x-go-name": "ProjectNumber"
        },
        "workshopActiveNumber": {
          "type": "string",
          "x-go-name": "WorkshopActiveNumber"
        },
        "workshopNumber": {
          "type": "string",
          "x-go-name": "WorkshopNumber"
        }
      },
      "x-go-package": "github.com/cloustone/pandas/apimachinery/models"
    },
    "dataModel": {
      "type": "object",
      "title": "DataModel ...",
      "properties": {
        "domain": {
          "type": "string",
          "x-go-name": "Domain"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataModelField"
          },
          "x-go-name": "Fields"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/cloustone/pandas/apimachinery/models"
    },
    "dataModelField": {
      "type": "object",
      "title": "DataModelField ...",
      "properties": {
        "defaultValue": {
          "type": "string",
          "x-go-name": "DefaultValue"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/cloustone/pandas/apimachinery/models"
    },
    "dataSource": {
      "type": "object",
      "properties": {
        "certFile": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "CertFile"
        },
        "connectURL": {
          "type": "string",
          "x-go-name": "ConnectURL"
        },
        "isProvider": {
          "type": "boolean",
          "x-go-name": "IsProvider"
        },
        "isTlsEnabled": {
          "type": "boolean",
          "x-go-name": "IsTLSEnabled"
        },
        "keyFile": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "KeyFile"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "protocol": {
          "type": "string",
          "x-go-name": "Protocol"
        },
        "servicePort": {
          "type": "string",
          "x-go-name": "ServicePort"
        }
      },
      "x-go-package": "github.com/cloustone/pandas/apimachinery/models"
    },
    "deployment": {
      "description": "Deployment Deployment",
      "type": "object",
      "properties": {
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "DeletedAt": {
          "type": "string",
          "format": "date-time"
        },
        "ID": {
          "type": "integer",
          "format": "uint64"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "modelTypeName": {
          "type": "string",
          "x-go-name": "ModelTypeName"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "reader": {
          "type": "string",
          "x-go-name": "Reader"
        },
        "readerConfigs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "ReaderConfigs"
        },
        "ruleChainId": {
          "type": "string",
          "x-go-name": "RuleChainID"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "userId": {
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/cloustone/pandas/apimachinery/models"
    },
    "deploymentControl": {
      "description": "DeploymentControl DeploymentControl",
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "x-go-name": "Action"
        }
      },
      "x-go-package": "github.com/cloustone/pandas/apimachinery/models"
    },
    "device": {
      "description": "Device Device",
      "type": "object",
      "properties": {
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "DeletedAt": {
          "type": "string",
          "format": "date-time"
        },
        "ID": {
          "type": "integer",
          "format": "uint64"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "dataModels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataModel"
          },
          "x-go-name": "Values"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "lastUpdatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastUpdatedAt"
        },
        "modelID": {
          "type": "string",
          "x-go-name": "ModelID"
        },
        "modelTypeName": {
          "type": "string",
          "x-go-name": "ModelTypeName"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "projectID": {
          "type": "string",
          "x-go-name": "ProjectID"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "userID": {
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/cloustone/pandas/apimachinery/models"
    },
    "deviceData": {
      "description": "DeviceData DeviceData",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/cloustone/pandas/apimachinery/models"
    },
    "deviceLog": {
      "description": "DeviceLog DeviceLog",
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/cloustone/pandas/apimachinery/models"
    },
    "deviceModel": {
      "description": "DeviceModel DeviceModel",
      "type": "object",
      "properties": {
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "DeletedAt": {
          "type": "string",
          "format": "date-time"
        },
        "ID": {
          "type": "integer",
          "format": "uint64"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "childModels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "ChildModels"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "dataModel": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/dataModel"
          },
          "x-go-name": "DataModels"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "domain": {
          "type": "string",
          "x-go-name": "Domain"
        },
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/endpoint"
          },
          "x-go-name": "Endpoints"
        },
        "icon": {
          "type": "string",
          "x-go-name": "Icon"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isCompound": {
          "type": "boolean",
          "x-go-name": "IsCompound"
        },
        "isLogical": {
          "type": "boolean",
          "x-go-name": "IsLogical"
        },
        "isPreset": {
          "type": "boolean",
          "x-go-name": "IsPreset"
        },
        "modelTypeName": {
          "type": "string",
          "x-go-name": "ModelTypeName"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastUpdatedAt"
        },
        "userId": {
          "type": "string",
          "x-go-name": "UserID"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/cloustone/pandas/apimachinery/models"
    },
    "endpoint": {
      "description": "Endpoint Endpoint",
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "x-go-name": "Format"
        },
        "models": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Models"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        }
      },
      "x-go-package": "github.com/cloustone/pandas/apimachinery/models"
    },
    "project": {
      "description": "Project Project",
      "type": "object",
      "properties": {
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "DeletedAt": {
          "type": "string",
          "format": "date-time"
        },
        "ID": {
          "type": "integer",
          "format": "uint64"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "last_updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastUpdatedAt"
        },
        "modelTypeName": {
          "type": "string",
          "x-go-name": "ModelTypeName"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "user_id": {
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/cloustone/pandas/apimachinery/models"
    },
    "projectSummary": {
      "description": "ProjectSummary ProjectSummary",
      "type": "object",
      "x-go-package": "github.com/cloustone/pandas/apimachinery/models"
    },
    "ruleChain": {
      "description": "RuleChain RuleChain",
      "type": "object",
      "properties": {
        "CreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "DeletedAt": {
          "type": "string",
          "format": "date-time"
        },
        "ID": {
          "type": "integer",
          "format": "uint64"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "bool": {
          "type": "boolean",
          "x-go-name": "Root"
        },
        "chainId": {
          "type": "string",
          "x-go-name": "ID"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "dataSource": {
          "$ref": "#/definitions/dataSource"
        },
        "debugMode": {
          "type": "boolean",
          "x-go-name": "DebugMode"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "domain": {
          "type": "string",
          "x-go-name": "Domain"
        },
        "lastUpdatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastUpdatedAt"
        },
        "modelTypeName": {
          "type": "string",
          "x-go-name": "ModelTypeName"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "payload": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8"
          },
          "x-go-name": "Payload"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "userId": {
          "type": "string",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/cloustone/pandas/apimachinery/models"
    }
  },
  "securityDefinitions": {
    "roleAuth": {
      "type": "oauth2",
      "flow": "password",
      "tokenUrl": "localhost:8080/v1/users/login",
      "scopes": {
        "admin": "scope of registere admin",
        "user": "scope of registered user"
      }
    }
  },
  "security": [
    {
      "roleAuth": [
        "user"
      ]
    }
  ],
  "tags": [
    {
      "description": "Operations about user",
      "name": "User"
    },
    {
      "description": "operation about dashboard",
      "name": "Dashboard"
    },
    {
      "description": "Operations about projects",
      "name": "Project"
    },
    {
      "description": "Operation about devices",
      "name": "Device"
    },
    {
      "description": "Operation about model",
      "name": "Model"
    },
    {
      "description": "Operation about log",
      "name": "Logs"
    },
    {
      "description": "operation about rule chain",
      "name": "Rulechain"
    }
  ]
}`))
}
